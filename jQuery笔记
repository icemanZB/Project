$('li').html();  // aaa   当是一组元素的时候,取值是一组中的第一个
$('li').html('hello'); // 所有的li里面的内容都为hello 当是一组元素的时候,赋值是一组元素中的所有元素
<ul>
    <li>aaa</li>
    <li>bbb</li>
    <li>ccc</li>
</ul>
如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值；
取值的时候，则是只取出第一个元素的值 ( .text()例外，它取出所有元素的text内容 )

has() 保包含的意思 所找的元素,是看他包含的内部当中是否有.box
$('div').has('.box').css('background','red');  // 只会让第一个div变红


filter() 是针对元素自身的  not() 也是一样的, 它是filter的反义词
$('div').filter('.box').css('background','red'); // 第二个div变红

<div>div1<span class='box'>span</span><div>
<div class='box'>div2</div>


next()  只会选择下一个兄弟节点   nextAll('.box')  找下面所有的兄弟节点有class为box的
prev()  只会选择上一个兄弟节点   prevAll('.box')  找上面所有的兄弟节点有class为box的

prevUntil()  nextUntil()  parentsUntil()  找到某个节点为止


height()、.innerHeight()和.outerHeight()的区别

height() 是没有计算过的  不包括padding,不包括边框
innerHeight()  包括padding但不包括border  document.getElementById("div1").clientHeight
outerHeight() 获取计算后的整个高度 包括padding和border 可以获取到隐藏元素  而原生的offsetHeight  获取不到隐藏元素
outerHeight(ture) 还可以接受一个参数,该参数代表是否计算外边距,如果为true则表示计算外边距  width+padding+border+margin


insertBefore()  before() 的区别
insertAfter() 和 after()  、 appendTo() 和 append()  、 prependTo() 和 prepend()  原理是一样的
区别在于后续的操作是针对哪个元素
$('div').append('p','h1');  先插入p 后插入h1

$('span').insertBefore($('div')).css('background','red');  // 在span前面插入div  span变红
$('div').before($('span')).css('background','red');  // span前面必须是div  div变红


on() 写多个事件绑定在元素上    off()  取消事件

$('div').on('click mouseover',function(){
    alert(1);
});

$('div').on({
    'click':function(){},
    'mouseover':function(){}
});


多个对象调用相同的事件
$('.mark_left,.prev').click();

ev : event 对象已经做了兼容
$('div').click(function(ev){
      console.log(ev);
      ev.target  //  div 操作的事件源
      ev.type   // click  事件类型
      // ev.pageX  类似于 原生js中 clientX  有所区别
      // clientX 是相对于可视区的    pageX 是相对于文档的,那么也就是多了一个滚动条的距离
      // ev.which 类似于 keyCode
      // ev.which 比keyCode更加强大,可以对应出鼠标的键值
      ev.preventDefault();  // 阻止默认事件

      ev.stopPropagation();  // 阻止冒泡的操作

      return false;  // 即阻止默认事件,又阻止了冒泡

});

如果想在点击操作的时候传数据的话  ev.data
$('div').on('click',{name:'hello'},function(ev){
    console.log(ev.data.name);
});


one  事件就只能执行一次
$('div').one('click',function(){console.log(1)});


$("#obj").position().left  //这个方法就是获取到屏幕的左边距离,不管父级有没有定位(可以不用自己写方法获取了,循环递归)
js 中 obj.offsetLeft 如果父级没有定位,那就相对于整个页面,父级有定位,那就相对于定位父级

$("#obj").position().left // 如果obj上没有定位,那么在jquery中会把obj看做是一个有定位的元素,那么获取的到的就是有定位
元素的left值,如果该元素有margin,是不算在内的 ==  obj.offsetLeft(); 到有定位的父级

<style>
*{margin:0;padding:0}
#div1{ width:200px;height:200px;background:red;overflow:hidden; margin:20px}
#div2{ width:100px;height:100px;background:yellow;margin:30px;}
<script>
    // div2.offsetLeft  没有定位值就是 50  div1有定位就是30
    $("#div2").offset().left   // 50  不管有没有定位  获取到屏幕的左距离
    $("#div2").position().left   // 20 (红的到屏幕的这段距离) div2就是看做一个有定位的元素了
    // div2本身的margin30px是不算进去的,因为有定位
    // 如果给div1加了定位 那么值就是为0  因为margin30是不算的
    // 如果给div2 加了left:25px;  那么他的值肯定就是25
</script>
</style>

<div id="div1">
    <div id="div2"></div>
</div>

parent()  获取父级  $('#div2').parent();  // div1

offsetParent() 获取有定位的父级  $('#div2').offsetParent() // 如果div1 有定位就是 div1  没有的话就是body

size() 像 length

fadeIn()  fadeOut()   淡入淡出从0到1 默认400ms
fadeOut() 即元素的不透明度的比例从100%逐渐减小到0%
fadeTo(1000,0.6)  淡入淡出到某个值
slideUp() slideDown() 向上向下卷曲
提示：如果元素已经隐藏，则该效果不产生任何变化
除了.show()和.hide()，所有其他特效的默认执行时间都是400ms
// 回调函数
$('p').fadeOut(300, function() { $(this).remove(); });
复杂的运动
$('div').animate(
    {
        left : "+=50", //不断右移
        opacity : 0.25 //指定透明度
    },
　　300, // 持续时间
　　function() { alert('done!'); } //回调函数
);
stop() 默认只会阻止当前的运动    stop(true)  阻止后续的所有运动
stop(true,true)  可以立即停止到指定的目标点,并阻止后续所有运动
finish()  会立即停止到运动中的所有目标点
delay(1000)  延迟一秒后在运动

$.fx.off如果设置为true，则关闭所有网页特效。


text()  获取的是所有元素的文本 (特例)
text('<h3>h3</h3>')  输出出来的是文本,不会转为标签

$('div').text();  // div1spandiv2div3

<div>div1<span>span</span></div>
<div>div2</div><div>div3</div>


remove()  // 删除节点

remove() 方法有返回值,就是返回删除后的元素
// 删除后的元素在重新添加回去,但是click事件已经没有了,不在触发
$('div').click(function(){ alert(1); });
var oDiv=$('div').remove();
$('body').append(oDiv);

detach()  作用和 remove() 是一样的,只不过他会保留删除元素的所有操作行为


parents()  获取所有祖先节点  其中可以传入参数 并且可以找到多个元素
parents('body').css('background','red');  就自有body元素添加了css样式
closest('body')  获取最近的指定的祖先节点(包括当前元素自身),必须要选筛选的参数,只能找到一个元素

<body class="box">
<div id="div1" class="box">aaa
    <div id="div2">bbb</div>   <!--  class="box" -->
</div>
</body>

$("#div2").parents('.box').css('background','red');  // div1 和 body 都会加上样式
$("#div2").closest('.box').css('background','red');  // div1 才会加上样式
// 如果class加上div2本身,那么closest()方法会使div2自身变红


siblings() 获取兄弟节点 其中也可以传入筛选的参数

clone() 无参数的情况是潜复制(不复制事件)  clone(true) 深复制(复制事件)


slice('起始位置','结束位置(不包括)')   $('li').slice(1,4).css('background','red');

<ul>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
</ul>


事件委托  优势提高性能   delegate()     undelegate()
把点击事件加到ul身上,当点击li,此时li本身没有事件的,通过冒泡的原理,冒到ul身上
$('ul').delegate('li','click',function(){
    this.style.background='red';
});


自定义事件与主动触发
$('div').on('show',function(){
    alert(1);
});
$('div').on('show',function(){
    alert(2);
});
$('div').trigger('show');   // 1 2 都会弹


工具方法
$.type()  可以判断出数组和json   返回: date array null 等..
$.trim()  去掉前后空格
var arr=['a','b','c','d']
$.inArray('b',arr)  b在arr中的位置,如果有的话就得到相应的位置1,没有就返回-1
$.proxy()  改变this指向   $.proxy('fn',document)(3)  3就是传的参数  $.proxy('fn',document,3) 第三个参数起就是传参数
$.noConflict() 避免冲突
$.parseJSON()  解析严格模式的json
$.markArray()  把类数组转换为真正的数组

插件
$.extend({
    leftTrim:function(str){
        return str.replace(/^\s+/,'');
    },
    rightTrim:function(){}
});

$.leftTrim();

$.fn.extend({
    drag:function(){
        var disX=0;
        var disY=0;
        var _this=this;
        // this ==> $('div')
        this.mousedown(function(ev){
            disX=ev.pageX-$(this).offset().left;
            disY=ev.pageY-$(this).offset.top;

            $(document).mousemove(function(ev){
                _this.css({
                    'left':ev.pageX-disX,
                    'top':ev.pageY-disY
                });
            });

            $(document).mouseup(function(){
                $(this).off();
            });

            return false;
        });
    }
});

$('div').drag();

// 如果已经配置了自定义的参数就使用自定义的,没有的话就使用默认配置参数
// this.setting 默认配置参数  this.getSetting() 用户自定义参数
// this.setting, this.getSetting() 都是json对象
$.extend(this.setting, this.getSetting());


给 jQuery 命名空间下添加全局函数，也称为静态方法
jQuery.myPlugin=function(){};
例如:$.ajax()、$.extend()

对象级别组件开发
即挂载在 jQuery 原型下的方法，这样通过选择器获取的 jQuery 对象实例也能共享该方法，也称为动态方法
$.fn.myPlugin=function(){};  这里的$.fn===$.prototype
例如 addClass() attr() 等，需要创建实例来调用

链式调用： $.fn.myPlugin=function(){
                return this.each(function(){ // do something });
          };
代码说明： return this 返回当前对象，来维护插件的链式调用
         each   循环实现每个元素的访问

单例模式：
$.fn.myPlugin=function(){
    var me=$(this),
        instance=me.data('myPlugin');
    if(!instance){
        me.data('myPlugin',(instance=new myPlugin()));
    }
};

代码说明：1、如果实例存在则不需要重新创建实例 2、利用data()来存放插件对象的实例



