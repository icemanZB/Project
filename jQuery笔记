*** html() 方法可以用于XHTML文档，但不能用于XML文档
$('li').html();  // aaa   当是一组元素的时候,取值是一组中的第一个
$('li').html('hello'); // 所有的li里面的内容都为hello 当是一组元素的时候,赋值是一组元素中的所有元素
<ul>
    <li>aaa</li>
    <li>bbb</li>
    <li>ccc</li>
</ul>
如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值
取值的时候，则是只取出第一个元素的值 ( .text()例外，它取出所有元素的text内容 )

------------------------------------------------------------------------------------------------------------------------

*** text()  获取的是所有元素的文本 ( 可以用来读取或者是设置某个元素的文本内容 )
注意:  1、JavaScript 中的 innerText 属性并不能再 FireFox 浏览器下运行，而 jQuery 的 text() 方法支持所有浏览器
       2、text() 方法对 HTML 文档和 XML 文档都有效
       3、text('<h3>h3</h3>')  输出出来的是文本,不会转为标签

<div>div1<span>span</span></div>
<div>div2</div><div>div3</div>

$('div').text();  // div1spandiv2div3

------------------------------------------------------------------------------------------------------------------------

jQuery 中的动画
fadeIn()、fadeOut()   淡入淡出从0到1 默认400ms   fadeOut() 即元素的不透明度的比例从100%逐渐减小到0%
fadeTo(1000,0.6)  淡入淡出到某个值
slideUp()、slideDown() 向上向下卷曲        slideToggle()、fadeToggle()  如果元素已经隐藏，则该效果不产生任何变化

除了 show() 和 hide()，所有其他特效的默认执行时间都是 400ms ( show()、hide() 默认为0ms )
隐藏元素并取消透明度 hide().animate({ opacity : "1" }  )
show() => animate({height : "show" , width : "show" , opacity : "show" } , 600 )
slideDown() => animate({height : "show" } , 600 )
fadeIn() => animate({ opacity : "show" } , 600 )
fadeTo() => animate({ opacity : "0.2" } , 600 )
// 回调函数
$('p').fadeOut(300, function() { $(this).remove(); });
复杂的运动
$('div').animate(
    {
        left : "+=50", // 在原有值的基础上右移
        opacity : 0.25 // 指定透明度
    },
　　300, // 持续时间
　　function() { alert('done!'); } //回调函数
);
stop([clearQueue],[gotoEnd])   [clearQueue],[gotoEnd] 可选
     [clearQueue]：是否要清空未执行完的动画队列
     [gotoEnd]：代表是否直接将正在执行的动画跳转到末尾状态

stop() 默认只会阻止当前的运动，如果接下来还有动画等待继续进行，则以当前状态开始接下来的动画。( 结束当前正在进行的动画，并立即执行队列中的下一个动画 )
例如：为一个元素绑定hover事件之后，用户把光标移入元素时会触发动画效果，而当这个动画还没结束时，用户就将光标移出了这个元素，
那么光标移出的动画效果将会被放进队列之中，等待光标移入的动画结束之后再执行。因此如果光标一如移出过快就会导致动画效果与
光标的动作不一致。此时只要在光标的移入、移出动画之前加入stop()，就能解决这个问题。

$("#panel").hover(function() {
    $(this).stop().animate({height : "150",width : "300"} , 200 );
},function() {
    $(this).stop().animate({height : "22",width : "60" } , 300 );
});

stop(true)  阻止后续的所有运动
            第2个参数 ( gotoEnd ) 可以用与让正在执行的动画直接达到结束时刻的状态，通常用于后一个动画需要基于前一个动画的末尾状态的情况，
            可以通过stop(false,true) 让当前动画直接到达末状态，继续下一个动画( 不清空动画队列，直接将正在执行的动画跳转到末尾状态 )
            stop(true,true)  可以立即停止到指定的目标点，并阻止后续所有运动 ( 清空动画队列，直接将正在执行的动画跳转到末尾状态 )

此时只用一个不带参数的 stop() 方法就显的力不从心。因为stop()方法只会停止正在进行的动画，如果动画正执行在第1阶段( 改变height的阶段 )，
则触发光标移出事件后，只会停止当前的动画，并继续进行下面的.animate({width : "300" } , 300 )动画，而光标移出事件中的动画要等这个动画
结束后才会继续执行，这显然不是预期的结果。这种情况下stoop()方法的第1个参数就发挥作用了，可以把第1个参数(clearQueue)设置为true，此时
程序会把当前元素接下来尚未执行完的动画队列都清空。

$("#panel").hover(function() {
	$(this).stop()
		.animate({height : "150" } , 200 )  // 如果在此时触发了光标移出的事件
		//  将执行下面的动画
		// 而非光标移出事件中的动画
		.animate({width : "300" } , 300 );
},function() {
	$(this).stop()
		.animate({height : "22" } , 200 )
		.animate({width : "60" } , 300 );
});

注意：jQuery只能设置正在执行的动画的最终状态，而没有提供直接到达未执行动画队列的最终状态的方法
当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left 等等。
同时，色彩动画并不包含在核心 jQuery 库中。如果需要生成颜色动画，您需要从 jQuery.com 下载 Color Animations 插件
$('div.content')
	.animate({width:'300'},200)
	.animate({height:'150'},300)
	.animate({opacity:'0.2'},2000);
无论这么设置stop()方法，均无法再改变"width"或者"height"时，将此div元素的某尾状态变成300*150的大小，并且设置透明度为0.2
也就是说 stop() 停止执行到一半的动画，可能这个时候是 width:100，height:100，而无法直接变成 width:300，height:150 最终结果

动画队列
css() 方法并不会加入到动画队列中去，而是立即执行，所以可以使用回调函数对非动画方法实现排队
$("#panel").css("opacity", "0.5");// 设置不透明度
$("#panel").click(function(){
    $(this).animate({left: "400px", height:"200px" ,opacity: "1"}, 3000)
           .animate({top: "200px" , width :"200px"}, 3000 )
           .queue(function(next){
                 $(this).css("border","5px solid blue");
                 next(); //继续下一个动画 slideUp("slow")
           })
           .slideUp("slow");
})

累加 和 直接设置值的区别
<style type="text/css">
    * { margin: 0; padding: 0; }
    body { padding: 60px }
    #panel { position: relative; width: 100px; height: 100px; border: 1px solid #0050D0; background: #96E555; cursor: pointer }
    #panel2 { position: relative; width: 100px; height: 100px; border: 1px solid #0050D0; background: blueviolet; cursor: pointer }
</style>
<div id="panel"></div>
<div id="panel2"></div>

<!-- 运动到 150px 150px -->
<div id="div1" style="background:#98bf21;height:100px;width:100px;position:absolute;">
</div>
<!-- 累加 运动到 250px 250px -->
<div id="div2" style="background:darkred;height:100px;width:100px;position:absolute; top: 550px;">
</div>
$(function () {
    // 动画效果相同，但是当点击第二次的时候，panel 不动了， panel2 会继续向左移动
    $(document).click(function () {
        $("#panel").animate({left: "400px"}, 1000);
    });
    $(document).click(function () {
        $("#panel2").animate({left: '+=' + 400}, 1000);
    });
    $(document).click(function () {
        $("#div1").animate({
            left: '250px',
            height: '+=150px',
            width: '+=150px'
        });
    });
    // 也可以定义相对值（该值相对于元素的当前值）。需要在值的前面加上 += 或 -=
    $(document).click(function () {
        $("#div2").animate({
            left: '250px',
            height: '150px',
            width: '150px'
        });
    });
});

// 判断元素是否正处于动画状态
if(!$(element).is(":animated")){
   // 如果当前没有进行动画，则添加新动画
}
finish() 停止当前运行的动画，移除所有排队的动画，并为被选元素完成所有动画( 立即停止到运动中的所有目标点 )。
stop(true,true)  清空动画队列，直接将正在执行的动画跳转到末尾状态，并阻止后续所有运动
stop(false,true) 不清空动画队列，直接将正在执行的动画跳转到末尾状态，继续下一个动画

delay(1000)  延迟一秒后在运动

$.fx.off 如果设置为true，则关闭所有网页特效。 ( 没有任何动画效果 )
jQuery.fx.off = true;  jQuery.fx.off = false;

------------------------------------------------------------------------------------------------------------------------

*** has() 检测某个元素是否在另一个元素中
<ul><li>Does the UL contain an LI?</li></ul>

$("ul").append("<li>" + ($("ul").has("li").length ? "Yes" : "No") + "</li>");
$("ul").has("li").addClass("full");

// 将匹配元素集合缩减为拥有匹配指定选择器或 DOM 元素的后代的子集
// 看他包含的内部当中是否有.box
<ul>
  <li>list item 1</li>
  <li>list item 2
    <ul>
      <li>list item 2-a</li>
      <li>list item 2-b</li>
    </ul>
  </li>
  <li>list item 3</li>
  <li>list item 4</li>
</ul>
// list item 2 背景变红
$('li').has('ul').css('background-color', 'red');

------------------------------------------------------------------------------------------------------------------------

*** filter() 是针对元素自身的，将匹配元素集合缩减为匹配指定选择器的元素

<div>
    <a href="javascript:;">div1</a>
    <span class='box'>span</span>
<div>
<div class='box'>div2</div>

$('div').filter('.box').css('background','red'); // 第二个div变红

------------------------------------------------------------------------------------------------------------------------

*** not() 从匹配元素集合中删除元素
<ul id="ul2">
    <li>list item 1</li>
    <li>list item 2</li>
    <li id="notli">list item 3</li>
    <li>list item 4</li>
    <li>list item 5</li>
</ul>
// 里面可以直接放 DOM 元素，除了item3，li的背景都变绿
$('#ul2 li').not(document.getElementById('notli')).css('background-color', 'green');

------------------------------------------------------------------------------------------------------------------------

*** next()  只会选择下一个兄弟节点( 紧邻的同辈元素 )，如果提供选择器，则取回匹配该选择器的下一个同胞元素

<ul>
	<li>list item 1</li>
	<li>list item 2</li>
	<li class="third-item">list item 3</li>
	<li>list item 4</li>
	<li>list item 5</li>
</ul>

$('li.third-item').next().css('background-color', 'red'); // 从 item3 开始找，找到下一个li，背景变成红色

------------------------------------------------------------------------------------------------------------------------

*** nextAll() 获得匹配元素集合中每个元素的所有跟随的同胞元素

<ul style="margin-top: 50px;">
    <li>list item 1</li>
    <li>list item 2</li>
    <li class="third-item">list item 3</li>
    <li>list item 4</li>
    <li>list item 5</li>
</ul>

$('li.third-item').nextAll().css('background-color', 'red'); // 从 item3 开始找，选择 item3 下所有 li ( 同胞元素 )

------------------------------------------------------------------------------------------------------------------------

*** nextUntil() 获得每个元素所有跟随的同胞元素，但不包括被选择器、DOM 节点或已传递的 jQuery 对象匹配的元素

语法 1、.nextUntil(selector,filter)
参数	描述   selector	字符串值，包含指示在何处停止匹配跟随的同胞元素的选择器表达式。
           filter	字符串值，包含用于匹配元素的选择器表达式。

语法 2、.nextUntil(element,filter)
参数	描述   element	指示在何处停止匹配跟随的同胞元素的 DOM 节点或 jQuery 对象。
           filter	字符串值，包含用于匹配元素的选择器表达式。
<dl>
	<dt id="term-1">term 1</dt>
	<dd>definition 1-a</dd>
	<dd>definition 1-b</dd>
	<dd>definition 1-c</dd>
	<dd>definition 1-d</dd>

	<dt id="term-2">term 2</dt>
	<dd>definition 2-a</dd>
	<dd>definition 2-b</dd>
	<dd>definition 2-c</dd>

	<dt id="term-3">term 3</dt>
	<dd>definition 3-a</dd>
	<dd>definition 3-b</dd>
</dl>

// 查找跟随 <dt id="term-2"> 的同胞元素，直到下一个 <dt>，然后将它们设置为红色背景色。
$(function () {
    $("#term-2").nextUntil("dt").css("background-color", "red");

    // 找到跟随 <dt id="term-1"> 的 <dd> 同胞元素，直到 <dt id="term-3">，并为它们设置蓝色文本颜色
    var term3 = document.getElementById("term-3");
    $("#term-1").nextUntil(term3, "dd").css("color", "blue");
});

------------------------------------------------------------------------------------------------------------------------

*** prev()  只会选择上一个兄弟节点( 紧邻的同辈元素 )前一个同胞元素

ul>
   <li>list item 1</li>
   <li>list item 2</li>
   <li class="third-item">list item 3</li>
   <li>list item 4</li>
   <li>list item 5</li>
</ul>
$('li.third-item').prev().css('background-color', 'red');  // item2 变红

------------------------------------------------------------------------------------------------------------------------

*** prevAll()   获得匹配元素集合中每个元素的上一个的同胞元素
<ul>
   <li>list item 1</li>
   <li>list item 2</li>
   <li class="third-item">list item 3</li>
   <li>list item 4</li>
   <li>list item 5</li>
</ul>

$('li.third-item').prevAll().css('background-color', 'red');  // item1、item2 变红

------------------------------------------------------------------------------------------------------------------------

*** prevUntil() 方法获得当前匹配元素集合中每个元素的前面的同胞元素，但不包括被选择器、DOM 节点或 jQuery 对象匹配的元素
语法 1、.prevUntil(selector, filter)
参数	描述   selector	可选。字符串值，包含指示在何处停止匹配前方同胞元素的选择器表达式。
           filter	可选。字符串值，包含用于匹配元素的选择器表达式。

语法 2、.prevUntil(element, filter)
参数	描述   element	可选。指示在何处停止匹配前方同胞元素的 DOM 节点或 jQuery 对象。
           filter	可选。字符串值，包含用于匹配元素的选择器表达式。

<dl>
	<dt id="term-1">term 1</dt>
	<dd>definition 1-a</dd>
	<dd>definition 1-b</dd>
	<dd>definition 1-c</dd>
	<dd>definition 1-d</dd>

	<dt id="term-2">term 2</dt>
	<dd>definition 2-a</dd>
	<dd>definition 2-b</dd>
	<dd>definition 2-c</dd>

	<dt id="term-3">term 3</dt>
	<dd>definition 3-a</dd>
	<dd>definition 3-b</dd>
</dl>

// 查找 <dt id="term-2"> 之前的同胞元素，直到前一个 <dt>，并将它们设置为红色。
$(function () {
    $("#term-2").prevUntil("dt")
            .css("background-color", "red");

    // 查找 <dt id="term-3"> 前面的 <dd> 同胞，直到 <dt id="term-1">，并把它们设置为蓝色文本
    var term1 = document.getElementById('term-1');
    $("#term-3").prevUntil(term1, "dd")
            .css("color", "blue");
});

------------------------------------------------------------------------------------------------------------------------

*** children() 方法只考虑子元素而不考虑其它后代元素
    注意，与大多数 jQuery 方法一样，.children() 不返回文本节点；如果需要获得包含文本和注释节点在内的所有子节点，使用 .contents()
<ul class="level-1">
	<li class="item-i">I</li>
	<li class="item-ii">II
		<ul class="level-2">sdsa
			<li class="item-a">A</li>
			<li class="item-b">B
				<ul class="level-3">
					<li class="item-1">1</li>
					<li class="item-2">2</li>
					<li class="item-3">3</li>
				</ul>
			</li>
			<li class="item-c">C</li>
		</ul>
	</li>
	<li class="item-iii">III</li>
</ul>

$('ul.level-2').children().css('background-color', 'red');

------------------------------------------------------------------------------------------------------------------------

*** siblings() 获取兄弟节点( 匹配元素前后所有的同辈元素 )，其中也可以传入筛选的参数

<ul>
   <li>list item 1</li>
   <li>list item 2</li>
   <li class="third-item">list item 3</li>
   <li>list item 4</li>
   <li>list item 5</li>
</ul>

$('li.third-item').siblings().css('background-color', 'red'); // item1、item2、item4、item5 变红

------------------------------------------------------------------------------------------------------------------------

*** parent(selector) 获得当前匹配元素集合中每个元素的父元素，使用选择器进行筛选是可选的

<div id="div">
    <div id="div1">
        <div id="div2"></div>
    </div>
</div>

$('#div2').parent();  // div1

------------------------------------------------------------------------------------------------------------------------

*** parents(selector)  获取所有祖先节点，其中可以传入参数并且可以找到多个元素
    找当前元素的所有父节点，返回的节点集是以从里到外的顺序排序的，接受一个字符串选择器，用于从返回的节点集中筛选符合选择器的子元素集

<div>
    <p class="demo">
		<span>
			<strong>My parents</strong>
		</span>
    </p>
</div>

$('strong').parents(); // span, p, div, body, html
$('strong').parents('.demo');  // p

------------------------------------------------------------------------------------------------------------------------

*** closest(selector)  获取最近的指定的祖先节点(包括当前元素自身),必须要选筛选的参数,只能找到一个元素
                       当closest()方法没有传入参数时，肯定是取不到元素的

<body class="box">
<div id="div1" class="box">aaa
    <div id="div2">bbb</div>   <!--  class="box" -->
</div>

// 如果class加上div2本身,那么closest()方法会使div2自身变红
$("#div2").closest('.box').css('background','red');  // div1 才会加上样式
$("#div2").parents('.box').css('background','red');  // div1 和 body 都会加上样式

// 通过 closest() 完成事件委托。当被最接近的列表元素或其子后代元素被点击时，会切换黄色背景

<ul id="ul1">
    <li><b>Click me!</b></li>
    <li>You can also <b>Click me!</b></li>
</ul>

$("#ul1").bind("click", function (ev) {
    console.log($(ev.target));
    $(ev.target).closest("li").toggleClass("hilight");
});

------------------------------------------------------------------------------------------------------------------------

*** parentsUntil()  获得当前匹配元素集合中每个元素的祖先元素，直到（但不包括）被选择器、DOM 节点或 jQuery 对象匹配的元素

语法 1、.parentsUntil(selector,filter)
参数	描述   selector	可选。字符串值，规定在何处停止对祖先元素进行匹配的选择器表达式。
           filter	可选。字符串值，包含用于匹配元素的选择器表达式。

语法 2、.parentsUntil(element,filter)
参数	描述   element	可选。DOM 节点或 jQuery 对象，指示在何处停止对祖先元素的匹配。
           filter	可选。字符串值，包含用于匹配元素的选择器表达式。

<ul class="level-1 yes">
	<li class="item-i">I</li>
	<li class="item-ii">II
		<ul class="level-2 yes">
			<li class="item-a">A</li>
			<li class="item-b">B
				<ul class="level-3">
					<li class="item-1">1</li>
					<li class="item-2">2</li>
					<li class="item-3">3</li>
				</ul>
			</li>
			<li class="item-c">C</li>
		</ul>
	</li>
	<li class="item-iii">III</li>
</ul>

$(function () {
    // 查找 <li class="item-a"> 的祖先元素，直到 <ul class="level-1">，并将它们设置为红色背景。
   $("li.item-a").parentsUntil(".level-1")
           .css("background-color", "red");

   // 找到 <li class="item-2"> 的所有类名为 "yes" 的祖先元素，直到 <ul class="level-1">，然户为它们设置蓝色边框
   $("li.item-2").parentsUntil($("ul.level-1"), ".yes")
           .css("border", "3px solid blue");
});

------------------------------------------------------------------------------------------------------------------------

*** offsetParent() 获得被定位的最近祖先元素 (获取有定位的父级，没有的话就是body)

<ul class="level-1">
	<li class="item-i">I</li>
	<li class="item-ii" style="position: relative;">II
		<ul class="level-2">
			<li class="item-a">A</li>
			<li class="item-b">B
				<ul class="level-3">
					<li class="item-1">1</li>
					<li class="item-2">2</li>
					<li class="item-3">3</li>
				</ul>
			</li>
			<li class="item-c">C</li>
		</ul>
	</li>
	<li class="item-iii">III</li>
</ul>

// offsetParent() 获得被定位的最近祖先元素
$('li.item-a').offsetParent().css('background-color', 'red'); // 改变 item-ii 的背景色

------------------------------------------------------------------------------------------------------------------------

*** css()
注意  1、如果是数字，将会被自动转化为像素值
      2、在css() 方法中，如果属性中带有'-'符号，例如 font-size 和 background-color 属性，如果在设置这些属性的值的时候
         不带引号，那么就要用驼峰式写法。例如：$('p').css({ fontSize:"30px",backgroundColor:"#888" });
         如果带上了引号，既可以写成"font-size"，也可以写成'fontSize'，建议带上引号

------------------------------------------------------------------------------------------------------------------------

*** $(element).css('height')  和  $(element).height() 的区别

css()方法获取的高度值与样式的设置有关，可能会得到'auto'，也可能得到'10px'之类的字符串；
而 height() 方法获取的高度值则是元素在页面中的实际高度，与样式设置无关，并且不带单位；

height()方法也能用来设置元素的高度，如果需要用其它单位(em)，则必须传递一个字符串
$('p').height(100)  、 $('p').height('10em')

------------------------------------------------------------------------------------------------------------------------

*** height()、innerHeight()、outerHeight() 的区别

height()、innerHeight()、outerHeight() 都可以获取隐藏元素的高度

height() 是没有计算过的  不包括 padding，不包括 border ( 边框 )
innerHeight()  包括 padding 但不包括 border ( 边框 ) === document.getElementById("obj").clientHeight
outerHeight()  获取计算后的整个高度，包括 padding 和 border ( 边框 )，而原生的 offsetHeight 获取不到隐藏元素
outerHeight(ture) 还可以接受一个参数,该参数代表是否计算外边距,如果为true则表示计算外边距  width+padding+border+margin

------------------------------------------------------------------------------------------------------------------------

*** append() 方法在被选元素的结尾(仍然在内部)插入指定内容

<p>This is a paragraph.</p>
<p>This is another paragraph.</p>
<button>在每个 p 元素后插入内容</button>
<div>aaaa</div>
<input type="button" value="按钮" id="btn"/>

/**
 * $(selector).append(function(index,html)) 可以使用函数构建html
 * */
$(document).ready(function(){
    $("button").click(function(){
        // 在每个 p 元素结尾插入内容(仍然在内部)
        // html <p>This is a paragraph.<b>Hello world!</b></p>
        // <p>This is a paragraph.<b>Hello world!</b></p>
        $("p").append("<b>Hello world!</b>");
    });
    // <p>This is a paragraph.<b>This p element has index 0</b></p>
    $("button").click(function(){
        $("p").append(function(n){
            return "<b>This p element has index " + n + "</b>";
        });
    });
    $('#btn').click(function(){
        $('p').append('div'); // 这里的 div 只是单纯的文本
        $('p').append($('div')); // 把div元素加入到p元素后面 (内部) 剪切
    });
});

------------------------------------------------------------------------------------------------------------------------

*** appendTo() 方法在被选元素的结尾(仍然在内部)插入指定内容。

<p>This is a paragraph.</p>
<p>This is another paragraph.</p>
<button>在每个 p 元素后插入内容</button>
<div>aaaa</div>
<input type="button" value="按钮" id="btn"/>

/* 在每个 p 元素结尾插入内容(仍然在内部) (先删除后插入)
 * html <p>This is a paragraph.<b>Hello world!</b></p>
 * <p>This is a paragraph.<b>Hello world!</b></p>
 */
$(document).ready(function(){
    $("button").click(function(){
        /**
         * 这里不能使用函数构建html,与 append() 有区别
         * $("<b>Hello World!</b>").appendTo(function(){}); 错误
         * */
        $("<b>Hello World!</b>").appendTo("p");
    });

    // 在p之后(p的内部)插入选择到div的元素( 剪切 )
    // 生成的html <p>This is another paragraph.<div>aaaa</div></p>
    $('#btn').click(function(){
        $('div').appendTo('p');
    });
});

------------------------------------------------------------------------------------------------------------------------

*** before()  方法在被选元素前( 外部 )插入指定的内容html

<p>This is a paragraph.</p>
<button>在每个 p 元素后插入内容</button>
<div>aaa</div>
<input type="button" value="按钮" id="btn"/>

// 生成的 html <p>Hello world!</p><p>This is a paragraph.</p>
$(document).ready(function () {
    $("button").click(function () {
        // before() 方法在被选元素前(外部)插入指定的内容
        $("p").before("<p>Hello world!</p>");
    });
    // 使用函数在被选元素之前( 外部 )插入指定的内容
    /**
     * $(selector).before(function(index)) 必需。规定返回待插入内容的函数
     * */
    // 生成的html <p>The p element below has index 0</p><p>This is a paragraph.</p>
    $("button").click(function () {
        $("p").before(function(n){
            return "<p>The p element below has index " + n + "</p>";
        });
    });
    $('#btn').click(function(){
        $('div').before('p'); // 这里的 p 不是一个选择器，不能获取p元素，只是单纯的文本
        $('div').before($('p')); // 在div元素前面插入p元素 (外部) 剪切
    });
});

------------------------------------------------------------------------------------------------------------------------

*** insertBefore()  方法在被选元素之前插入 HTML 标记或已有的元素 (外部)

<p>This is a paragraph.</p>
<button>在每个 p 元素后插入内容</button>
<h1>这是一个标题</h1>
<p>这是一个段落。</p>
<p>这是另一个段落。</p>
<button id="btn">在每个 p 元素之前插入 h1 元素</button>

// 注释：如果该方法用于已有元素，这些元素会被从当前位置移走，然后被添加到被选元素之前
// 生成的 html <span>你好！</span><p>This is a paragraph.</p>
$(document).ready(function () {
    $("button").click(function(){
        $("<span>你好！</span>").insertBefore("p");
    });
    // 生成的 html <h1>这是一个标题</h1><p>This is a paragraph.</p>
    $("#btn").click(function(){
        $("h1").insertBefore("p"); // 在p之前插入h1，这两个参数均是选择器 ( 剪切 )
    });
});

------------------------------------------------------------------------------------------------------------------------

*** after()  使用函数在被选元素之后插入指定的内容html (外部)

<p>This is a paragraph.</p>
<button>在每个 p 元素后插入内容</button>
<div>aaa</div>
<input type="button" id="btn" value="按钮"/>

// 生成的 html <p>This is a paragraph.</p><p>Hello world!</p>
$(document).ready(function () {
    $("button").click(function () {
        $("p").after("<p>Hello world!</p>");
    });
    // 使用函数在被选元素之后插入指定的内容
    /**
     * $(selector).after(function(index)) 必需。规定返回待插入内容的函数
     * */
    // 生成的html <p>This is a paragraph.</p><p>The p element above has index 0</p>
    $("button").click(function () {
        $("p").after(function (n) {
            return "<p>The p element above has index " + n + "</p>";
        });
    });
    $('#btn').click(function(){
        $('div').after('p'); // 这里的 p 不是一个选择器，不能获取p元素，只是单纯的文本
        $('div').after($('p')); // 把获取到的p元素插入到div后面 (外部) 剪切
    });
});

------------------------------------------------------------------------------------------------------------------------

*** insertAfter()  方法在被选元素之后( 外部 )插入 HTML 标记或已有的元素

<p>这是一个段落。</p>
<p>这是另一个段落。</p>
<button>在每个 p 元素之后插入 span 元素</button>

<h1>这是一个标题</h1>
<div>这是一个段落。</div>
<div>这是另一个段落。</div>
<button id="btn">在每个 p 元素之后插入 h1 元素</button>

// 注释：如果该方法用于已有元素，这些元素会被从当前位置移走，然后被添加到被选元素之后
// html <p>这是一个段落。</p><span>Hello world!</span>
// <p>这是一个段落。</p><span>Hello world!</span>
$(document).ready(function(){
    $("btn").click(function(){
        // 在每个 p 元素之后插入 span 元素
        $("<span>Hello world!</span>").insertAfter("p");
    });
    // h1会被移走,添加到被选元素之后
    // 生成的html <div>这是一个段落。</div><h1>这是一个标题</h1>
    $("#btn").click(function(){
        $("h1").insertAfter("div"); // 在div的后面插入h1，这两个参数均是选择器 ( 剪切 )
    });
});

------------------------------------------------------------------------------------------------------------------------

*** prepend() 方法在被选元素的开头（仍位于内部）插入指定内容

<p>This is a paragraph.</p>
<p>This is another paragraph.</p>
<button>在每个 p 元素的开头插入内容</button>

<div>aaaa</div>
<input type="button" value="按钮" id="btn"/>

// 在每个 p 元素开头插入内容(仍然在内部)
// html <p><b>Hello world!</b> This is another paragraph.</p>
// <p><b>Hello world!</b> This is another paragraph.</p>
$(document).ready(function () {
    $("button").click(function () {
        $("p").prepend("<b>Hello world!</b> ");
    });
    /**
     * $(selector).prepend(function(index,html))  函数必须规定返回待插入内容的函数
     * */
    // 生成的html <p><b>这个 p 元素的 index 是：0</b>This is a paragraph.</p>
    $("button").click(function () {
        $("p").prepend(function (n) {
            return "<b>这个 p 元素的 index 是：" + n + "</b> ";
        });
    });
    // 在div之前插入p字符串
    $('#btn').click(function(){
        $('p').prepend('div'); // 这里的 p 不是一个选择器，不能获取p元素，只是单纯的文本
        $('p').prepend($('div')); // 在p元素前面插入div元素 (内部) 剪切
    });
});

------------------------------------------------------------------------------------------------------------------------

*** prependTo()  方法在被选元素的开头（仍位于内部）插入指定内容

<p>This is a paragraph.</p>
<p>This is another paragraph.</p>
<button>在每个 p 元素的开头插入内容</button>
<div>aaaa</div>
<input type="button" value="按钮" id="btn"/>

// 在每个 p 元素开头插入内容(仍然在内部)  先删除后插入
// html <p><b>Hello world!</b> This is another paragraph.</p>
// <p><b>Hello world!</b> This is another paragraph.</p>
/**
 * 提示：prepend() 和 prependTo() 方法作用相同。
 * 差异在于语法：内容和选择器的位置，以及 prepend() 能够使用函数来插入内容。
 * */
$(document).ready(function () {
    $("button").click(function(){
        $("<b>Hello World!</b>").prependTo("p");
    });

    // 在p之前(p的内部)插入选择到div的元素
    // 生成的html <p><div>aaaa</div>This is another paragraph.</p>
    $('#btn').click(function(){
        $('div').prependTo('p');
    });
});

------------------------------------------------------------------------------------------------------------------------

*** 对于 before() 、 insertBefore() 这类的DOM结构操作的一些区别

1、后续的操作是针对哪个元素
$('span').insertBefore($('div')).css('background','red');  // 在span前面插入div  span变红
$('div').before($('span')).css('background','red');  // span前面必须是div  div变红

2、prepend() 和 prependTo() 方法作用相同
   差异在于语法：内容和选择器的位置 $('div').prependTo('p')，p、div 都是选择器 ==> $('p').prepend($('div'))
                                  $('p').prepend('div'); 只有p是选择器
   prepend() 能够使用函数来插入内容。

------------------------------------------------------------------------------------------------------------------------

*** ev : event 对象已经做了兼容
$('div').click(function(ev){
      ev.target  //  div 操作的事件源 ( 获取事件对象DOM元素 )
      ev.type   // click  事件类型
      // ev.pageX  类似于 原生js中 clientX  有所区别
      // clientX 是相对于可视区的    pageX 是相对于文档的，那么也就是多了一个滚动条的距离
      // ev.which 类似于 keyCode
      // ev.which 比keyCode更加强大，可以对应出鼠标的键值  1=鼠标左键 2=鼠标中键 3=鼠标右键，在键盘事件中获取键盘的按键
      // ev.metaKey 针对不同的浏览器对键盘中的<ctrl>按键解释不同，jQuery进行了封装
      ev.preventDefault();  // 阻止默认事件
      ev.stopPropagation();  // 阻止冒泡的操作
      return false;  // 即阻止默认事件,又阻止了冒泡
});

ev.reatedTarget();

mouseover 和 mouseout 这两个触发的事件对象里添加了一个叫 relatedTarget 的属性，来表示与事件相关的DOM元素。
mouseover 中 relatedTarget 指向鼠标来自的元素，而 mouseout 中的 relatedTarget 指向的是鼠标去向的那个元素。
jQuery中，reatedTarget 只用在 mouseover 和 mouseout 事件中，且 relatedTarget 是一个对象属性，不是一个函数（方法）不能调用。
$("div").mouseenter(function(event){
    alert("relatedTarget is: " + event.relatedTarget);
});

------------------------------------------------------------------------------------------------------------------------

*** offset()  获取到屏幕的左边距离，不管父级有没有定位，或者自己是绝对定位 ( 只对可见元素有效 )

<div id="div1">
	<div id="div2"></div>
</div>

<style>
* { margin: 0; padding: 0 }

#div1 { width: 200px; height: 200px; background: red; overflow: hidden; margin: 20px; position: relative; }

#div2 { width: 100px; height: 100px; background: yellow; margin: 30px; position: absolute; left: 60px; display: -none; }
</style>
<script type="text/javascript">
$(function () {
    // 这个方法就是获取到屏幕的左边距离,不管父级有没有定位，或者自己是绝对定位(可以不用自己写方法获取了,循环递归)
    // margin-left 也是计算在内 (  获取元素在当前视窗的相对偏移，他只对可见元素有效 )
    // 如果 div1、div2 都没有定位，就获取到屏幕左边的距离 ( 50 = 20 + 30  )
    alert($("#div2").offset().left); // 110 = 20 + 30 + 60
});
</script>

------------------------------------------------------------------------------------------------------------------------

*** position() 获取相对于最近的一个position样式属性为relative或者absolute的父节点相对偏移，有定位的情况

<div id="div1">
    <div id="div2"></div>
</div>
<style>
* { margin: 0; padding: 0 }

#div1 { width: 200px; height: 200px; background: red; overflow: hidden; margin: 20px; position: relative; }

#div2 { width: 100px; height: 100px; background: yellow; margin: 30px; position: absolute; left: 60px; }
</style>
<script>
   $(function () {
        // div1、div2 都没有定位的话，就是 20 (红块的到屏幕的这段距离)，div2就是看做一个有定位的元素了
        // div2 本身的 margin: 30px;是不算进去的，因为有定位 ( 样式关系 )
        // 如果 div2 没有定位，而 div1有定位，值为 0，因为margin30是不算的
        alert($("#div2").position().left); // 60，有left值肯定获取的是left值，并且不计算margin值
   });
</script>

------------------------------------------------------------------------------------------------------------------------

*** remove() 当前节点和该节点所包含的所有后代节点将同时被删除，返回指向已被删除的节点引用

<p>这是一个段落。</p>

<p>这是另一个段落。</p>
<button>删除所有 p 元素</button>
<ul>
    <li title='苹果'>苹果</li>
    <li title='橘子'>橘子</li>
    <li title='菠萝'>菠萝</li>
</ul>

$(function () {
    $('button').click(function () {
        $('p').remove();
    });

    $('ul li').click(function () {
        console.log($(this).html());
    });

    var $li = $('ul li:eq(1)').remove(); // 获取第2个<li>元素节点后，将它从网页中删除，点击事件也被删除

    $li.appendTo('ul'); // 把刚才删除的节点重新添加到<ul>元素里

    // 可以直接使用appendTo()来简化代码: $('ul li:eq(1)'.appendTo('ul')
    // 传递参数，选择性删除元素
     $('ul li').remove("li[title!='苹果']");
});

------------------------------------------------------------------------------------------------------------------------

*** detach() 从DOM中去掉匹配元素，这个方法不会把匹配元素从jQuery对象中删除，并且所有绑定的事件、附加数据都保留下来了

<ul>
    <li title='苹果'>苹果</li>
    <li title='橘子'>橘子</li>
    <li title='菠萝'>菠萝</li>
</ul>

$(function () {
     $('ul li').click(function(){
         console.log($(this).html());
     });
     var $li=$('ul li:eq(1)').detach(); // 删除元素
     $li.appendTo('ul'); // 重新追加元素，发现他之前绑定的事件还在，如果使用remove()方法，那么绑定的事件失效

 });

------------------------------------------------------------------------------------------------------------------------

*** remove() 和 detach() 的区别

<div id="div1">测试div1</div>
<div id="div2">测试div2</div>

/**
 * remove()  删除节点
 * remove() 方法有返回值,就是返回删除后的元素
 */
$(function () {
    // 由于div被删除了click事件已经没有了，不在触发
    $('#div1').click(function () {
        alert(1);
    });
    // detach()  作用和 remove() 是一样的，只不过他会保留删除元素的所有操作行为
    $('#div2').click(function () {
        alert(2);
    });
    var oDiv1 = $('#div1').remove();
    var oDiv2 = $('#div2').detach();
    // 删除后的元素在重新添加回去
    $('body').append(oDiv1, oDiv2);
});

------------------------------------------------------------------------------------------------------------------------

*** clone() 复制节点，无参数的情况是潜复制(不复制事件)  clone(true) 深复制(复制事件)

<ul>
    <li title='苹果'>苹果</li>
    <li title='橘子'>橘子</li>
    <li title='菠萝'>菠萝</li>
</ul>

$(function () {
    // 复制节点 clone(true) 复制元素的同时复制元素所绑定的事件
    $("ul li").click(function(){
        // clone() 潜复制，不保留事件
        $(this).clone(true).appendTo("ul"); // 注意参数 true，可以复制自己，并且他的副本保留事件。
    })
});

------------------------------------------------------------------------------------------------------------------------

*** hover() 方法准确的来说是代替 jQuery 中的 bind('mouseenter') 和 bind('mouseleave')，而不是代替bind('mouseover') 和 bind('mouseout')
因此当需要触发 hover() 方法的第二个函数时，需要用到的是 trigger('mouseleave')来触发，而不是trigger('mouseout')

------------------------------------------------------------------------------------------------------------------------

*** mouseover() 与 mouseenter() 的区别

<p>不论鼠标指针穿过被选元素或其子元素，都会触发 mouseover 事件。</p>

<p>只有在鼠标指针穿过被选元素时，才会触发 mouseenter 事件。</p>

<div class="over" style="background-color:lightgray;padding:20px;width:40%;float:left">
    <h2 style="background-color:white;">
        被触发的 Mouseover 事件：
        <span></span>
    </h2>
</div>
<div class="enter" style="background-color:lightgray;padding:20px;width:40%;float:right">
    <h2 style="background-color:white;">
        被触发的 Mouseenter 事件：
        <span></span>
    </h2>
</div>

$(function () {
    var x = 0, y = 0;
    $("div.over").mouseover(function () {
        $(".over span").text(x += 1);
    });
    $("div.enter").mouseenter(function () {
        $(".enter span").text(y += 1);
    });
});

------------------------------------------------------------------------------------------------------------------------


slice('起始位置','结束位置(不包括)')   $('li').slice(1,4).css('background','red');

<ul>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
</ul>

事件委托  优势提高性能   delegate()     undelegate()  建议使用 on
把点击事件加到ul身上,当点击li,此时li本身没有事件的,通过冒泡的原理,冒到ul身上
$('ul').delegate('li','click',function(){  // 建议使用
    this.style.background='red';
});

$("ul").on("click", "li", function () {
    $(this).css('background','red');
});

bind()、unbind()
// 当光标滑入div元素时，该元素的class切换为'over'；当光标划出div元素时，class切换为先前的值
$('div').bind('mouseover mouseout',function(){
   $(this).toggleClass('over');
});

// 给事件添加命名空间
$("div").bind("click.plugin",function(){
   $("body").append("<p>click事件</p>");
});
$("div").bind("mouseover.plugin", function(){
   $("body").append("<p>mouseover事件</p>");
});
// 取消绑定 unbind()
$("button").click(function() {
   $("div").unbind(".plugin");
})
unbind()  1、如果没有参数，则删除所有绑定的事件
          2、如果提供了事件类型作为参数，则只删除该类型的绑定事件
          3、如果把在绑定时传递的处理函数作为第2个参数，则只有这个特定的事件处理函数会被删除
<button id="btn">点击我</button>
<div id="test"></div>
<button id="delTwo">删除第二个事件</button>

$('#btn').bind("click", myFun1 = function(){
   $('#test').append("<p>我的绑定函数1</p>");
}).bind("click", myFun2 = function(){
   $('#test').append("<p>我的绑定函数2</p>");
}).bind("click", myFun3 = function(){
   $('#test').append("<p>我的绑定函数3</p>");
});
$('#delTwo').click(function(){
   $('#btn').unbind("click",myFun2);
});

// 相同事件名称，不同命名空间执行方法
$("div").bind("click",function(){
   $("body").append("<p>click事件</p>");
});
$("div").bind("click.plugin", function(){
   $("body").append("<p>click.plugin事件</p>");
});
// 当单击div元素后，会同时触发 click 事件和 click.plugin 事件。如果只是单击 button 元素，则只触发 click 事件，而不触发click.plugin事件
// 注意，trigger('click!')后面的感叹号作用是匹配所有不包含在命名空间中的方法
// 如果需要两者都被触发： $('div').trigger('click');
$("button").click(function() {
   $("div").trigger("click!");    // 注意click后面的感叹号
});


on() 写多个事件绑定在元素上    off()  取消事件

$('div').on('click mouseover',function(){
    alert(1);
});

$('div').on({
    'click':function(){},
    'mouseover':function(){}
});

如果想在点击操作的时候传数据的话  ev.data
$('div').on('click',{name:'hello'},function(ev){
    console.log(ev.data.name);
});


自定义事件与主动触发
$('div').on('show',function(){
    alert(1);
});
$('div').on('show',function(){
    alert(2);
});
$('div').trigger('show');   // 1 2 都会弹

trigger() 方法触发被选元素的指定事件类型
<button id="btn">点击我</button>
<div id="test"></div>
<script>
    $(function () {

        $('#btn').trigger('click') // 可以主动触发事件  $('#btn').click();
        // 触发自定义事件

        $('#btn').bind("myClick", function () {
            $('#test').append("<p>我的自定义事件.</p>");
        });

        $('#btn').click(function () {
            $(this).trigger("myClick");
        }).trigger("myClick");

        // 传参数
        $('#btn').bind("myClick2", function (event, message1, message2) {
            $('#test').append("<p>" + message1 + message2 + "</p>");
        });
        $('#btn').click(function () {
            $(this).trigger("myClick2", ["我的自定义", "事件"]);
        }).trigger("myClick", ["我的自定义", "事件"]);

        // 会触发 input 元素绑定的focus事件，也会使input元素本身得到焦点( 这是浏览器的默认操作 )
        // 如果只想触发绑定 focus 事件，而不想执行浏览器默认操作，可以使用triggerHandler()方法
        $('input').trigger('focus');
        $('input').triggerHandler('focus'); // 只会触发绑定的focus事件，不会得到焦点

    });
</script>




工具方法
$.type()  可以判断出数组和json   返回: date array null 等..
$.trim()  去掉前后空格
var arr=['a','b','c','d']
$.inArray('b',arr)  b在arr中的位置,如果有的话就得到相应的位置1,没有就返回-1
$.proxy()  改变this指向   $.proxy('fn',document)(3)  3就是传的参数  $.proxy('fn',document,3) 第三个参数起就是传参数
$.noConflict() 避免冲突
$.parseJSON()  解析严格模式的json
$.markArray()  把类数组转换为真正的数组

插件
$.extend({
    leftTrim:function(str){
        return str.replace(/^\s+/,'');
    },
    rightTrim:function(){}
});

$.leftTrim();

$.fn.extend({
    drag:function(){
        var disX=0;
        var disY=0;
        var _this=this;
        // this ==> $('div')
        this.mousedown(function(ev){
            disX=ev.pageX-$(this).offset().left;
            disY=ev.pageY-$(this).offset.top;

            $(document).mousemove(function(ev){
                _this.css({
                    'left':ev.pageX-disX,
                    'top':ev.pageY-disY
                });
            });

            $(document).mouseup(function(){
                $(this).off();
            });

            return false;
        });
    }
});

$('div').drag();

// 如果已经配置了自定义的参数就使用自定义的,没有的话就使用默认配置参数
// this.setting 默认配置参数  this.getSetting() 用户自定义参数
// this.setting, this.getSetting() 都是json对象
$.extend(this.setting, this.getSetting());


给 jQuery 命名空间下添加全局函数，也称为静态方法
jQuery.myPlugin=function(){};
例如:$.ajax()、$.extend()

对象级别组件开发
即挂载在 jQuery 原型下的方法，这样通过选择器获取的 jQuery 对象实例也能共享该方法，也称为动态方法
$.fn.myPlugin=function(){};  这里的$.fn===$.prototype
例如 addClass() attr() 等，需要创建实例来调用

链式调用： $.fn.myPlugin=function(){
                return this.each(function(){ // do something });
          };
代码说明： return this 返回当前对象，来维护插件的链式调用
         each   循环实现每个元素的访问

单例模式：
$.fn.myPlugin=function(){
    var me=$(this),
        instance=me.data('myPlugin');
    if(!instance){
        me.data('myPlugin',(instance=new myPlugin()));
    }
};

代码说明：1、如果实例存在则不需要重新创建实例 2、利用data()来存放插件对象的实例


***************        append 的一个特殊用法：$('div').append('p','h1');  先插入p 后插入h1

one  事件就只能执行一次
$('div').one('click',function(){console.log(1)});

多个对象调用相同的事件
$('.mark_left,.prev').click();

如果该元素有margin，是不算在内的 ==  obj.offsetLeft(); 到有定位的父级
js 中 obj.offsetLeft 如果父级没有定位,那就相对于整个页面,父级有定位,那就相对于定位父级


var $li = $('ul li:eq(1)').remove(); // 获取第2个<li>元素节点后，将它从网页中删除，点击事件也被删除

$li.appendTo('ul'); // 把刚才删除的节点重新添加到<ul>元素里

// 可以直接使用appendTo()来简化代码: $('ul li:eq(1)'.appendTo('ul')