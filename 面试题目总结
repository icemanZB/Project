HTML 面试整理：

1、 在怪异模式和传统模式下区别？ [ 详细解释待定 ]

    IE和标准的盒模型是由：margin、border、padding、content 组成

    IE 盒子模型的 content 部分包含了 border 和 padding  即宽度包含了border和padding

    W3C盒子模型的 content 部分不包含其他部分


2、不换行必须设置 word-break、white-space


3、font:italic bold small-caps 1em/140% "lucida Grande",sans-serif; 拆分开来是什么？

font-style:italic;  font-weight:bold;

font-variant:small-caps; 此属性设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写,
                         但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。

font-family:"Lucida Grande",sans-serif; font-size:1em; line-height:140%;


4、简述 border:none; 以及 border:0; 的区别，并给出使用建议。

border:none;表示边框样式无;border:0;表示边框宽度为0;
当定义了border:none,即隐藏了边框的显示，实际就是边框宽度为0。
当定义边框时,必须定义边框的显示样式，因为边框默认样式为不显示 none ，所以仅设置边框宽度，由于样式不存在，边框的宽度也自动被设置为0。


5、为一个图片设置成背景图像后，设置背景图像在纵向和横向上平铺，下面哪个是实现该功能的？ (单选)  B
   A、no-repeat B、repeat C、repeat-x D、repeat-y
   考点：css的背景background (repeat)


6、想要设置一个对象外的线条轮廓的样式为虚线边框，用_______________实现该功能。
   考点：css 的轮廓 outline ( outline-style: dashed ) 注释：如果规定了 !DOCTYPE，则 IE8 支持 outline 属性。


7、在css中，如果想要阻止计数器增加的，用__________________来实现。
   考点：css的内容content ( counter-increment : none )


8、在编写css样式的时候，如果想要设置标记容器和主容器之间的补白，用_______________来表示。
   考点：css 的列表 ( marker-offset )


9、如果想设置一个对象内文本的流动和方向，用_______________标签来实现，该标签有两个值，分别是_____________、______________。
   考点：css的文本Text （ text-layout-flow，horizontal、vertical-ideographic）


10、DOCTYPE( 文档类型 )的作用是什么？你知道多少种文档类型？

<!DOCTYPE>声明位于文档中的最前面的位置，处于<html>标签之前，此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。
该标签可声明三种 DTD 类型，分别表示严格版本、过渡版本以及基于框架的 HTML 文档。
HTML 4.01 规定了三种文档类型：Strict、Transitional 以及 Frameset。
XHTML 1.0 规定了三种 XML 文档类型：Strict、Transitional 以及 Frameset。
Standards ( 标准 )模式(也就是严格呈现模式 )用于呈现遵循最新标准的网页,而
Quirks( 包容 )模式( 也就是松散呈现模式或者兼容模式 )用于呈现为传统浏览器而设计的网页。


11、CSS hacks技巧？

CSS hack技巧 _、 *、 +、 \9、 !important

_width 针对于IE6

*width、+width 针对于IE6、7

color: red\9; /* IE10以及以下版本浏览器 */

*+html 与 *html 是 IE 特有的标签，firefox暂不支持.

*+html 又为IE7特有标签 ( 但是测试*html兼容IE6-10。*+兼容IE7-10 )

!important 在IE中会被忽视，IE6、7、8不识别，IE9+( 包括IE9 )是识别的


12、http状态码？

Web服务器用来告诉客户端，发生了什么事，也就是一种快速解决问题的方式。
200：OK，服务器成功处理了请求。
301/302: Moved Permanently(重定向),请求的URL已移走,一个是永久转移,一个是临时转移。
         Response中应该包含一个Location URL, 说明资源现在所处的位置。
304：Not Modified(未修改),客户的缓存资源是最新的,要客户端使用缓存。
404：HTTP/1.1 404 Not Found,服务器无法找到所请求的URL。
501：Internal Server Error,服务器遇到一个错误,使其无法对请求提供服务。
503：Service Unavailable(未提供此服务),服务器目前无法为请求服务服务,但过一段时间就可以恢复服务。
1XX信息性状态码。
2XX成功状态码。
3XX重定向状态码。
4XX客户端错误状态码。
5XX服务器错误状态码。


13、浏览器对CSS的匹配原理？

浏览器CSS匹配不是从左到右进行查找，而是从右到左进行查找。比如div#divBox p span.red{ color:red; }
浏览器的查找顺序如下：先查找 html 中所有 class="red" 的 span 元素，找到后再查找其父辈元素中是否有p元素
再判断 p 的父元素中是否有 id 为 divBox 的 div 元素，如果都存在则CSS匹配上。
浏览器从右到左进行查找的好处是为了尽早过滤掉一些无关的样式规则和元素。
firefox称这种查找方式为 keyselector (关键字查询),所谓的关键字就是样式规则中最后(最右边)的规则,上面的key就是span.red。


14、HTML 与 XHTML——二者有什么区别？

1). 所有的标记都必须要有一个相应的结束标记
2). 所有标签的元素和属性的名字都必须使用小写
3). 所有的 XML 标记都必须合理嵌套
4). 所有的属性必须用引号 "" 括起来
5). 把所有 < 和 & 特殊符号用编码表示
6). 给所有属性赋一个值
7). 不要在注释内容中使 "–"
8). 图片必须有说明文字


15、CSS中 link 和 @import 的区别？

1). link 属于 HTML 标签，而@import是CSS提供的
2). 页面被加载的时，link 会同时被加载，而 @import 引用的 CSS 会等到页面被加载完再加载
3). @import 只在 IE5 以上才能识别，而 link 是 HTML 标签无兼容问题
4). link 方式的样式的权重高于 @import 的权重

16、position 的 absolute 与 fixed 共同点与不同点？  [ 详细解释待定 ]
共同点：
    1). 改变行内元素的呈现方式，display 被置为 block
    2). 让元素脱离普通流，不占据空间
    3). 默认会覆盖到非定位元素上
不同点:
absolute 的 "根元素" 是可以设置的，而 fixed 的 "根元素" 固定为浏览器窗口。当你滚动网页，fixed元素与浏览器窗口之间的距离是不变的


17、瀑布流布局 或者 流式布局 是否有了解？

瀑布流布局: 采用绝对定位来给每张图片定位
流式布局: 采用浮动式给模块定位，可以做出响应式布局


18、子元素选择器 和后代选择器元素有什么区别

css选择器中的 '>' 如果不希望选择任意的后代元素，而是只选择某个元素的子元素,使用子元素选择器(Child selector)
E > F 子元素选择器,匹配所有E元素的子元素F
<style type="text/css">
	h1 > strong {color:red;}  /* 就只有第一个h1下面的strong文字变红 */
	h1 strong { color:blue;}  /* h1 下的所有strong都会变红 */
</style>
<h1>
	This is
	<strong>very</strong>
	<strong>very</strong>
	important.
</h1>


19、line-height的属性值有几种单位的表达形式，分别有什么区别？

px   像素  像素px是相对于显示器屏幕分辨率而言的
1em = 16px  em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。
em有如下特点：1). em的值并不是固定的;2). em会继承父级元素的字体大小。
%   百分比


20、颜色值的表达方式有多少种，一般怎么去使用？

1). 16进制 #ffffff
2). 直接写英文  red
3). rgb数字范围 rgb(255,255,255)
4). rgba(255,255,255,.3)  支持透明


21、background-size 有多少个默认的属性值，效果分别是怎么样的？

background-size:10px 20px 直接写数字 第一个值设置宽度，第二个值设置高度
background-size:10% 20% 百分比设置
background-size:cover  屏幕 扩充整个背景 自动适应元素
background-size:contain  图像扩展至最大尺寸 高度 宽度相同


22、flex是啥？能干啥  [ 详细解释待定 ]

-webkit-box-flex  他可以将父元素的可用空间平均分配空间


23、background:#fff url(…) 50% 30%/50% 30% no-repeat;这个拆分后分别有什么属性？

background-color:#fff背景颜色白色
background-img: url图片覆盖在颜色上
background-repeat图片不重复
50% 30%/50% 30%  [background-position] / [ background-size]
注：background: [background-color] [background-image] [background-repeat]
                [background-attachment] [background-position] / [ background-size]
                [background-origin] [background-clip];


24、border-radius:50px 10px 30px 5px/5px 5px 30px 50px; 这个效果是什么，为什么会这样？

画出不规则的圆角
左上角 X轴为50px  Y轴5px
右上角 X轴为10px  Y轴5px
右下角 X轴为 30px  Y轴30px
左下角 X轴为 5px   Y轴50px


25、animation 怎么让动画在最后一帧的时候停下来，只让动画运动一次并停留在最后一帧？

animation-fill-mode: forwards;   用来定义元素在动画结束后的样子,默认是none
animation-iteration-count:1;     动画只播放一次


26、-webkit-mask 的使用方式，原理是什么？  [ 详细解释待定 ]

遮罩层
.box{
	background: url(img/image.jpg) repeat;
	-webkit-mask: url(img/mask.png);
}


27、在HTML5中input标签新增了多少个类型，分别是什么，都有什么作用？

1). Input 类型 - email 在提交表单时，会自动验证 email 域的值。
2). Input 类型 - url 在提交表单时，会自动验证 url 域的值。
3). Input 类型 - number 只能输入数字
4). Input 类型 - range
5). range 类型用于应该包含一定范围内数字值的输入域。
6). range 类型显示为滑动条。
7). Input 类型 - date( 日期选择器 )


28、在手机端 webkit 内核的浏览器中，如果要美化表单元素，关键的一个属性是什么 ？

-webkit-appearance:none;  禁用表单input、select元素的默认外观
补充： ::-ms-expand 适用于表单选择控件下拉箭头的修改
select::-ms-expand {
display: none;
}
::-ms-check 适用于表单复选框或单选按钮默认图标的修改
input[type=radio]::-ms-check,
input[type=checkbox]::-ms-check{
display: none;
}
禁用 PC 端表单输入框默认清除按钮
input[type=text]::-ms-clear,
input[type=tel]::-ms-clear,
input[type=number]::-ms-clear{
display: none;
}


29、哪些地方会出现css阻塞，哪些地方会出现js阻塞？

js 的阻塞特性：所有浏览器在下载 JS 的时候，会阻止一切其他活动，比如其他资源的下载，内容的呈现等等。直到 JS 下载、解析、执行完毕后才开始继续并行
下载其他资源并呈现内容。为了提高用户体验，新一代浏览器都支持并行下载 JS，但是 JS 下载仍然会阻塞其它资源的下载( 例如：图片，css文件等)。
由于浏览器为了防止出现 JS 修改 DOM 树，需要重新构建 DOM 树的情况，所以就会阻塞其他的下载和呈现。
嵌入 JS 会阻塞所有内容的呈现，而外部 JS 只会阻塞其后内容的显示，两种方式都会阻塞其后资源的下载。

CSS 本来是可以并行下载的，在IE6 下 CSS 都是阻塞加载
当 CSS 后面跟着嵌入的 JS 的时候，该 CSS 就会出现阻塞后面资源下载的情况
因为浏览器会维持 html 中 css 和 js 的顺序，样式表必须在嵌入的 JS 执行前先加载、解析完。而嵌入的 JS 会阻塞后面的资源加载，
所以就会出现上面 CSS 阻塞下载的情况。


30、IE 各版本和 chrome 可以并行下载多少个资源?

浏览器并发请求数：同一时间针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻止。
1. IE6 2 个并发
2. IE7 升级之后的 6 个并发，之后版本也是 6 个
3. Firefox，chrome 也是6个


31、列举可继承和不可继承的属性？
1). 不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、
position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、overflow。

2). 所有元素可继承：visibility 和 cursor。

3).内联元素可继承：line-height、color、font、font-family、font-size、font-style、font-weight、text-decoration、
letter-spacing、word-spacing、text-transform。

4). 块状元素可继承：text-indent 和 text-align。
5). 列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。
6). 表格元素可继承：border-collapse。


32、CSS3新增伪类举例？
1). p:first-of-type 选择属于其父元素的首个元素的每个元素。
2). p:last-of-type  选择属于其父元素的最后元素的每个元素。
3). p:only-of-type  选择属于其父元素唯一的元素的每个元素。
4). p:only-child    选择属于其父元素的唯一子元素的每个元素。
5). p:nth-child(2)  选择属于其父元素的第二个子元素的每个元素。
6). :enabled :disabled 控制表单控件的禁用状态。
7). :checked 单选框或复选框被选中。


33、CSS中能够将对象从文档流中抽出的方式 ？
1). absolute fixed
2). float也脱离文档流。浮动元素脱离文档流，不占据空间。


34、relative 和 absolute 定位原点是？  [ 详细解释待定 ]

1). absolute 生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。
2). fixed 相对于浏览器窗口进行定位。
3). relative 生成相对定位的元素，相对于其正常位置进行定位。
4).	static 默认值。没有定位，元素出现在正常的流中
5).	inherit 规定从父元素继承 position 属性的值。


35、CSS3有哪些新特性？

1). CSS3实现圆角( border-radius )、阴影( box-shadow )、对文字加特效( text-shadow )、线性渐变( gradient )、运动( transform )
transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);/* 旋转,缩放,定位,倾斜 */
2). 增加了更多的CSS选择器
3). rgba() 支持透明
4). 媒体查询
5). 多栏布局


36、为什么要初始化CSS样式？

因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。


37、对BFC规范的理解？
BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。
(W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。)


38、清除浮动的几种方法？   [ 详细解释待定 ]


39、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？

1). HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。
2). 拖拽释放( Drag and drop ) API
3). 语义化更好的内容标签( header、nav、footer、aside、article、section )
4). 音频、视频API( audio、video )
5). 画布( Canvas ) API
6). 地理(Geolocation) API
7). 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；
8). sessionStorage 的数据在浏览器关闭后自动删除
9). 表单控件 ( calendar、date、time、email、url、search )
10). 新的技术 webworker、 websocket、 Geolocation
HTML 5 移除的元素
1). 纯表现的元素：basefont、big、center、font；
2). 对可用性产生负面影响的元素：frame、frameset、noframes；
HTML5兼容问题：
IE8/IE7/IE6支持通过document.createElement方法产生的标签，可以利用这一特性让这些浏览器支持HTML5新标签，
当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架


40、什么叫优雅降级和渐进增强 ？

优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。
由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了，为那些无法支持功能的浏览器增加候选方案
在旧式浏览器上以某种形式降级体验却不至于完全失效。

渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能，向页面增加无害于基础浏览器的额外样式和功能的。
当浏览器支持时，它们会自动地呈现出来并发挥作用。


41、http与https的主要区别 ？

在URL前加https:// 前缀表明是用SSL加密的。 你的电脑与服务器之间收发的信息传输将更加安全。
Web 服务器启用 SSL 需要获得一个服务器证书并将该证书与要使用SSL的服务器绑定。
http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。
http的连接很简单,是无状态的。
HTTPS协议是由 SSL+ HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全


42、怎么优化你的CSS ？

所谓高效的CSS就是让浏览器在查找style匹配的元素的时候尽量进行少的查找。

1). 不要在ID选择器前使用标签名
例如：一般写法div#divBox  更好写法：#divBox
解释：因为ID选择器是唯一的，加上div反而增加不必要的CSS匹配。

2). 不要在 class 选择器前使用标签名
例如：一般写法：span.red 更好写法：.red
解释：同第一条，但如果你定义了多个.red，而且在不同的元素下是样式不一样则不能去掉，比如你css文件中定义如下：
p.red{color:red;}
span.red{color:#ff00ff}
如果是这样定义的就不要去掉去掉后就会混淆，不过建议最好不要这样写

3、尽量少使用层级关系
例如：一般写法：#divBoxp.red{color:red;} 更好写法：.red{color:red;}

4、使用class代替层级关系
例如： 一般写法：#divBoxullia{display:block;}
更好写法：.block{display:block;}

5、在css渲染效率中id和class的效率是基本相当的
class最在第一次载入中被缓存，在层叠中会有更加好的效果，在根部元素采用id会具有更加好( id有微妙的速度优势 )
实际的优化建议

1).	创建合法的 HTML 和 CSS ，别忘了制定文件编码，Style 应该写在 head 标签中，script 标签应该加载 body 标签结束的位置。
2).	试着简化和优化 CSS 选择器，将嵌套层数控制在最小。以下是 CSS 选择器的性能排行（从最快的开始）：
a.	ID选择器：#id
b.	class选择器： .class
c.	标签: div
d.	相邻的兄弟元素：a + i
e.	父元素选择器： ul > li
f.	通配符选择器： *
g.	伪类和伪元素： a:hover ，你应该记住浏览器处理选择器是从右向左的，这也就是为什么最右面的选择器会更快——#id或.class。


43、前端开发的优化问题 ？
1). 减少http请求次数：css spirit,data uri
2). JS、CSS源码压缩
3). 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存Ajax请求结果，每次操作本地变量，不用请求，减少请求次数
4). 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能
5). 用setTimeout来避免页面失去响应
6). 用hash-table来优化查找
7). 当需要设置的样式很多时设置 className 而不是直接操作 style
8). 少用全局变量
9). 缓存DOM节点查找的结果
10). 避免使用CSS Expression
11). 图片预载
12). 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢


44、浏览器的内核分别是什么？

IE浏览器的内核 Trident、Mozilla 的 Gecko、Chrome的 Blink( WebKit的分支)、Opera内核原为Presto，现为Blink；


45、 兼容问题？   [ 详细解释待定 ]


46、超链接访问过后hover样式就不出现了，被点击访问过的超链接样式不在具有hover和active了？

L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}


47、语义化的理解？

1).	用正确的标签做正确的事情
2).	html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；
3). 在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。
4). 搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。


48、	frame有那些缺点？

1). iframe 会阻塞主页面的onload事件；
2). iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。
3). 使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过JavaScript，动态给iframe添加src属性值，这样可以可以绕开以上两个问题。


49、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）

1).  查找浏览器缓存
2).  DNS解析、查找该域名对应的IP地址、重定向( 301 )、发出第二个GET请求
3).	 进行HTTP协议会话
4).	 客户端发送报头( 请求报头 )
5).	 服务器回馈报头( 响应报头 )
6).	 html文档开始下载
7).	 文档树建立，根据标记请求所需指定MIME类型的文件
8).	 文件显示

注： 浏览器这边做的工作大致分为以下几步：
加载：根据请求的URL进行域名解析，向服务器发起请求，接收文件（HTML、JS、CSS、图象等）。
解析：对加载到的资源( HTML、JS、CSS等 )进行语法解析，建议相应的内部数据结构( 比如HTML的DOM树，JS的( 对象 )属性表，CSS的样式规则等等）


50、块级元素和行内元素都有哪些？    [ 详细解释待定 ]
块级元素：div、p、h1-h6、ul、ol、dl、form、hr
行内元素：a、b、i、span、strong、em、font





JavaScript 面试整理：

1、事件委托是什么？

让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行。


2、闭包是什么,有什么特性,对页面有什么影响？

闭包允许一个函数定义在另一个外部函数的作用域内，即便作用域内的其他东西都消失了，它仍可以访问该外部函数内的变量。

function say667() {
    var num = 666;
    var sayAlert = function() { alert(num); }
    num++;
    return sayAlert;
}

var sayAlert = say667();

sayAlert(); // 执行结果应该弹出的 667

解释：执行 say667() 后，say667() 闭包内部变量会存在，而闭包内部函数的内部变量不会存在。使得 JavaScript 的垃圾回收机制( GC )
不会收回 say667() 所占用的资源，因为 say667() 的内部函数的执行需要依赖 say667() 中的变量。


3、如何阻止事件冒泡和默认事件？

当前要阻止冒泡的事件函数中调用 event.cancelBubble = true;   阻止默认事件事：return false;


4、冒泡原理？

事件冒泡： 当一个元素接收到事件的时候，会把他接收到的所有的事件传递给他的父级，一直到顶层window对象


5、解释 jsonP 的原理，以及为什么不是真正的Ajax？

原理： 动态创建script标签,因为用script标签加载资源是没有跨域问题的，在资源加载进来之前定义好一个函数，这个函数接收一个参数(数据)
然后通过script标签加载对应远程文件资源,当远程的文件资源被加载进来的时候，就会去执行我们前面定义好的函数，并且把数据当作这个函数的参数传入进去。
其中 1.js 中内容是
fn([1,2,3]);
<script src="1.js"></script>
<script>
    function fn(data){
        console.log(data);  // [1,2,3]
    }
</script>

script标签的src属性是没有跨域的限制的。这样说来这种跨域方式其实与 Ajax  XmlHttpRequest协议无关了。所以不是Ajax


6、 jsonP的优缺点？

jsonP优点：不受同源策略的影响，它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持;
          并且在请求完毕后可以通过调用callback的方式回传结果。
jsonP缺点：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。


7、 请解释一下跨域的问题？

域：域名
跨域请求(访问)：一个域名下的文件请求另外一个域名下的资源,就产生了跨域
跨域问题简单的理解就是因为JS同源策略的限制（安全性限制），a.com域名下的JS无法操作b.com或c.a.com下的对象。


8、请解释一下 JavaScript 的同源策略？  [ 详细解释待定 ]

所谓同源：就是指域名()、协议()、端口相同()，防止其他网页对本网页的非法篡改


9、XMLHttpRequest对象是什么？

XmlHttp提供客户端同 http 服务器通讯的协议。客户端可以通过 XmlHttp 对象向 http 服务器发送请求并使用 XML 文档对象模型处理回应。


10、什么是Ajax，它的优点是什么？

Ajax就是异步的 JavaScript 和 XML : Asynchronous JavaScript and XML
优点：
1).节省用户操作，提高用户体验，减少数据请求
2).无刷新的方式传输获取数据(用JavaScript异步形式去操作xml 文档或对象)


11、Ajax 过程？

1). 打开浏览器，创建 Ajax 对象
var xhr=null;
if(window.XMLHttpRequest){
    xhr=new XMLHttpRequest();
}else{  // IE6兼容
    xhr=new ActiveXOject('Microsoft.XMLHttp');
}
2).在地址栏输入地址 ( get 提交 )
xhr=.open('get','1.php?username=iceman'+new Date().getTime(),true);  // true 为异步 false 为同步 加上时间戳去掉浏览器缓存
3).提交发送请求
xhr.send();

其中post 提交
xhr.open('post','2.php');
xhr.setRequestHeader('content-type','application/x-www-form-urlencoded');
xhr.send('username=iceman');

4).等待服务器返回内容
/*
    onreadystatechange： 当 readyState 改变时触发
    readyState：Ajax 工作状态
                0 ( 初始化 ) 还没有调用 open() 方法
                1 ( 载入 ) 已调用send() 方法，正在发送请求
                2 ( 载入完成 ) send() 方法完成，已收到全部相应内容
                3 ( 解析 ) 正在解析相应内容
                4 ( 完成 ) 响应内容解析完成，可以在客户端调用了
    status：服务器状态码 ( 404 Not Found )
    responseText：Ajax请求返回内容就被存放到这个属性下面( string 类型 )
*/
xhr.onreadystatechange=function(){
    if(xhr.readyState==4){
        if(xhr.status==200){
            console.log(xhr.responseText);
        }else{
            console.log('出错了，Err'+xhr.status);
        }
    }
};


12、Get 和 Post 的区别 ？

在客户端和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。
GET  - 从指定的资源请求数据。
POST - 向指定的资源提交要被处理的数据。
传输方式的区别
1).	Get通过url地址传输
2).	POST请求则是作为HTTP消息的实体内容发送给Web服务器的,这种传递是对用户不可见的
3).	Get可以被缓存
传输数据量
1). Get有数据量限制，每个浏览器都不同 ( 2048个字符 )
2). Post理论上无限
3). 不能被缓存
GET	与 POST 相比, GET 更简单也更快,并且在大部分情况下都能用。
然而,在以下情况中使用 POST 请求:
1).	无法使用缓存文件( 更新服务器上的文件或数据库 )
2).	向服务器发送大量数据( POST 没有数据量限制 )
3).	发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠


13、JavaScript 有哪几种数据类型？
基本: Number、Boolean、String、Null、undefined
引用: Object、Array、Function


14、document.write() 和 innerHTML的区别
document.write只能重绘整个页面，innerHTML可以重绘页面的一部分


15、URL的编码和解码？

encodeURIComponent(url) 和 decodeURIComponent(url)


16、如何禁用浏览器的前进后退按钮？

<script type="text/javascript">
$(document).ready(function() {
    window.history.forward(1);
    window.history.forward(-1);
});
</script>


17、 offsetTop 和 style.top 的区别

offsetTop: 盒子顶部相对定位父级顶部的高度 如果父级没有定位,那就相对于整个页面
offsetTop 只能获取到有定位的父级

1)、offsetTop 返回的是数字，而 style.top 返回的是字符串，数字加单位。
2)、offsetTop 只读 而 style.top 可读写。
3)、如果没有给 HTML 元素指定过 top 样式，则 style.top 返回的是空字符串。


18、数据类型转换

[]+1+3  结果为 "13"
[1]+3   结果为 "13"
null+1+3  结果为 4

转换成数字
+x  使用一个一元的加号运算符，这是最快的方法
x-0 或 x*1 另一种形式
Number(x)  使用不带new的数字构造函数进行转换

对象和函数总是被转换成NaN, undefined 也会被转换成 NaN, 但 null 会被转换成 0
+[]  结果为 0 ( 隐式类型转换成了数字0 )
+[1] 结果为1
+[1,2] 结果为 NaN
+new Array(1) 结果为0 ( 只是 new 了一个 Array 对象，并没有初始化该数组 )
+new Array(1,2) 结果为NaN


19、form中的input可以设置为readonly和disable，请问两者有什么区别？

readonly不可编辑,但可以选择和复制；值可以传递到后台
disabled不能编辑,不能复制,不能选择；值不可以传递到后台


20、for(i=0, j=0; i<10, j<6; i++, j++){
     k = i + j;
   }  问结果是多少？

i 与 j 都是从0 到5 执行了6次

第1次：k=i+j=0+0
第2次：k=i+j=1+1
第3次：k=i+j=2+2
第4次：k=i+j=3+3
第5次：k=i+j=4+4
第6次：k=i+j=5+5

第6次执行完之后，i++, j++，此时i=6,j=6,因为j=6不再小于6，所以for循环结束

此时 k=i+j=5+5 保持不变，即k=10

结果：10


21、什么是变量提升( Variable Hoisting ) ？

变量提升指的是，无论是哪里的变量在一个范围内声明的，那么 JavaScript 引擎会将这个声明移到范围的顶部。
如果在函数中间声明一个变量，例如在某一行中赋值一个变量
function foo(){
    var a = "abc";
}
实际上会这样运行代码：
function foo(){
    var a;
    a = "abc";
}


22、 JavaScript 内部对象的描述？
History 对象包含用户（在浏览器窗口中）访问过的 URL
Location 对象包含有关当前 URL 的信息
Window 对象表示浏览器中打开的窗口
Navigator 对象包含有关浏览器的信息


23、new 关键字做了什么？

1)、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。
2)、属性和方法被加入到 this 引用的对象中。
3)、新创建的对象由 this 所引用并且最后隐式的返回 this 。


24、编写JavaScript代码，以实现单击按钮时弹出按钮上数字所对应的阶乘( 从1乘至按钮上所在数字的结果 )

HTML：
<input type="button" value="1">
<input type="button" value="2">
<input type="button" value="3">
<input type="button" value="4">
<input type="button" value="5">
<input type="button" value="6">
<input type="button" value="7">
<input type="button" value="8">
<input type="button" value="9">
<input type="button" value="10">

JavaScript：

function factorial( n ){
    return ( n <= 1 ) ? 1 : n * factorial( n-1 );
}


25、cookie的优缺点
优点：
1). 极高的扩展性和可用性
2). 通过加密和安全传输技术（SSL），减少cookie被破解的可能性
3). 只在cookie中存放不敏感数据，即使被盗也不会有重大损失
4). 控制cookie的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的cookie。
5). cookie可以跨越一个域名下的多个网页，可用在保存用户登录状态、跟踪用户行为、定制页面、创建购物车等。
缺点：
1).cookie 数量和长度的限制。每个domain 最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。
2).安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，
他只要原样转发cookie就可以达到目的了。
3).有些状态不可能保存在客户端
4). cookie 不可以跨域


26、	请描述一下 cookies，sessionStorage 和 localStorage 的区别？
1).	cookie在浏览器和服务器间来回传递。 sessionStorage 和 localStorage不会
2).	sessionStorage 和 localStorage 的存储空间更大；
3).	sessionStorage 和 localStorage 有更多丰富易用的接口；
4). sessionStorage 和 localStorage 各自独立的存储空间；



27、Javascript 里面的继承怎么实现，如何避免原型链上面的对象共享？ [ 详细解释待定 ]

用构造函数和原型链的混合模式去实现继承，避免对象共享可以参考经典的extend()函数，很多前端框架都有封装的，就是用一个空函数当做中间变量


28、CMD 与 AMD 的区别
1)、从官方推荐的写法上面得出：
CMD ----- 依赖就近
// CMD
define(function(require,exports,module){
        var a = require('./a');
        a.doSomthing();
});
AMD ----- 依赖前置
// AMD
define(['./a','./b'],function(a,b){
       a.doSomthing();
       b.doSomthing();
});
当然AMD也支持CMD的写法。

2)、执行顺序上：
•   CMD是延迟执行，推崇的是 as lazy as possible
•	AMD是提前执行，requireJS 从2.0开始可以延迟执行

3)、api设计角度：
•	CMD 的 API 推崇职责单一，没有全局的require
•	AMD 的 API 默认是一个当多个用：比如require有全局的和局部的


29、	模块化怎么做？ [ 详细解释待定 ]

立即执行函数,不暴露私有成员
var module1 = (function(){
　　　var _count = 0;
　　　var m1 = function(){
　　　　　//...
　　　};
　　　var m2 = function(){
　　　　　//...
　　　};
　　　return {
　　　　　m1 : m1,
　　　　　m2 : m2
　　　};
})();


30、什么是内存泄露，那些操作会造成内存泄漏？
1).	内存泄漏指任何对象在不再拥有或需要它之后仍然存在。
2).	垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0( 没有其他对象引用过该对象 )，那么该对象的内存即可回收。
3）.setTimeout() 的第一个参数使用字符串而非函数的话，会引发内存泄漏。
4).闭包、循环( 在两个对象彼此引用且彼此保留时，就会产生一个循环 )



jQuery 面试整理：

1、CDN（内容分发网络）是什么？

在开发Web页面，考虑最多的问题之一是页面在客户端电脑的响应：时间越短，用户体验越好。
而制约用户体验的关键因素之一是浏览器下载Web文件大小，包括*.html、图片、*.js、*.css等文件。
为了最大化复用和节约带宽，故CDN应运而生：其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，
使内容传输的更快、更稳定。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。


2、jQuery中的.height()、.innerHeight()和.outerHeight() ？

.height() 是没有计算过的  不包括padding,不包括边框
获取计算后的整个高度  aLi.outerHeight() = offsetHeight
.innerHeight()  包括 padding 但不包括 border  document.getElementById("div1").clientHeight
.outerHeight()  包括 padding 和 border  还可以接受一个参数,该参数代表是否计算外边距,如果为 true 则表示计算外边距


3、jQuery的美元符号$有什么作用？

$只是 jQuery 的别名，它是 jQuery 的选择器，当然你也可以用jQuery来代替$
$() 函数用于将任何对象包裹成 jQuery 对象


4、body中的onload()函数和jQuery中的document.ready()有什么区别？

1). 我们可以在页面中使用多个document.ready()，但只能使用一次onload()。
2). document.ready()函数在页面DOM元素加载完以后就会被调用，而onload()函数则要在所有的关联资源( 包括图像、音频 )加载完毕后才会调用。


5、查找页面所有类是 Edit 的 Input 且 type 是 text 的元素,遍历它们,并返回它们的 Value 数组。

var values = [];
$("input[type=text][.Edit]").each(function (i, d) {
    values.push($(d).val());
});
或者
var values = [];
$("input[type=text]").filter(".Edit").each(function(i,d){
    values.push($(d).val());
});


6、 jquery对象和dom对象是怎样转换的？

1). jQuery对象是一个数组对象，可以通过[index]得到相应的对象
2). 通过get[index]去得到相应的DOM对象


7、检查<input type="hidden" id="id" name="id" />元素在网页上是否存在。

if($("#id").length > 0) { // do something... }


8、页面中有三个元素 <div>div标签</div><span>span标签</span><p>p标签</p>，如果这三个标签要触发同一个事件？

$("div,span,p").click(function(){   // ...   });


9、页面中有一个select标签，要使"选项四"选中？
<select id="sel">
   <option value="0">请选择</option>
   <option value="1">选项一</option>
   <option value="2">选项二</option>
   <option value="3">选项三</option>
   <option value="4">选项四</option>
</select>

$("#sel").val("4");

注：找到所有 HTML select 标签的选中项？ $('[name=NameOfSelectedTag] :selected')


10、页面中有一个性别单选按钮，请设置”男”为选中状态？

<input type="radio" name="sex"> 男
<input type="radio" name="sex"> 女

$(":radio[name=sex]:eq(0)").attr("checked",true);


12、执行下面代码，请写出打印结果 ？

$(document).ready(function () {
   var array = ['墨家', '墨子'];
   var str = "[";
   $.each(array, function (parm1, parm2) {
       str += "{parm1: " + parm1 + "," + "parm2: " + parm2 + "},";
   });
   str = str.substring(0, str.length - 1) + "]";
   alert(str);
});

结果： "[{parm1: 0,parm2: 墨家},{parm1: 1,parm2: 墨子}]"


13、执行下面代码，写出result结果？    $.extend()

 $(document).ready(function () {
    var result = $.extend(
        {},
        {name: "Tom", age: 21},
        {sex: "boy", age: 27, email: "ydw@163.com"}
        );
    alert(result);
 });

结果： Object {name: "Tom", age: 27, sex: "boy", email: "ydw@163.com"}


14、当DOM加载完成后要执行的函数,下面哪个是正确的？(单选)

   A、jQuery(expression, [context])  B、jQuery(html, [ownerDocument])
   C、jQuery(callback)    D、jQuery(elements)

   考点: jquery的核心函数 (C)


15、下面哪一个是用来追加到指定元素的末尾的？(单选)

   A、insertAfter() B、append() C、appendTo() D、after()

   考点:jquery的核心函数 (C)


16、如果想在一个指定的元素后添加内容，下面哪个是实现该功能的？(单选)

   A、append(content) B、appendTo(content) C、insertAfter(content) D、after(content)

   考点: jquery的文档处理 (D)


17、下面哪一个是用来追加到指定元素的末尾的？     ( A )
    A、insertAfter()  B、append()  C、appendTo()  D、after()

 1).append()在被选元素的结尾插入内容。
 2).appendTo() 在被选元素的结尾(仍然在内部)插入指定内容。 (是把所有匹配的元素追加到另一个指定的元素元素集合中)
 3).insertAfter() 在被选元素之后插入 HTML 标记或已有的元素。(将所有匹配元素插入到指定元素的后面) 用来追加到指定元素的末尾的
 4).after() - 在被选元素之后插入内容  (在指定元素末尾添加   HTML标签或内容)


18、现有一个表格,如果想要匹配所有行数为偶数的，用________实现，奇数的用_______实现。

   考点: jquery的选择器 （even,odd）


19、当一个文本框中的内容被选中时,想要执行指定的方法时,可以使用下面哪个事件来实现？(单选)

   A、click(fn) B、change(fn) C、select(fn) D、bind(fn)

   考点：jquery的事件处理 (C)


20、在一个表单中,用600毫秒缓慢的将段落滑上,用_______________来实现。

   考点: jquery的页面效果 $("p").slideUp("slow")


21、彻底将jQuery变量还原,可以使用___________________方法实现。

   考点: jquery的多库共存 ($.noConflict(extreme))
   $.noConflict();
   jQuery("p").text("I am jquery and I am working&hellip;");


22、 jquery 阻止这些默认的行为方法是哪个？

    可以用 event.preventDefault() 或 在事件处理函数中返回false 即 return false;


23、 jQuery 阻止冒泡事件的方法是哪个？

     事件冒泡是从里面的往外面开始触发，event.stopPropagation() 方法可以停止冒泡


24、jQuery中的 hover() 和 toggle()有什么区别？

hover() 和 toggle()都是 jQuery 中两个合成事件。
hover() 方法用于模拟光标悬停事件、toggle()方法是连续点击事件。


25、在ajax中data参数主要有几种方式？

有三种 1、html拼接的 2、json数组 3、form表单serialize()序列化的。


26、jQuery是如何处理缓存的？

1).  通过$.post() 方法来获取数据，那么默认就是禁用缓存的。
2).  通过$.get()方法 来获取数据，可以通过设置时间戳来避免缓存。
例 $.get('ajax.xml?random=new Date().getTime(),function () { ... });
3).  通过$.ajax 方法来获取数据，只要设置cache:false即可。


27、你觉得beforeSend方法有什么用？

发送请求前可以修改XMLHttpRequest对象的函数，在beforeSend中如果返回false，可以取消本次的Ajax请求。
XMLHttpRequest对象是唯一的参数,所以在这个方法里可以做验证。


28、在jquery中可以替换节点吗？

可以，在jQuery中有两者替换节点的方式   replaceWith() 和 replaceAll()

例: 在<p title="hao are you">hao are you</p>替换成<strong>I am fine<strong>

    $('p').replaceWith('<strong>I am fine</strong>');

    replaceAll() 与 replaceWith() 的用法前后调换一下即可。


29、你jquery中有哪些方法可以遍历节点？

children() 取得匹配元素的子元素集合,只考虑子元素不考虑后代元素
next()     取得匹配元素后面紧邻的同辈元素
prev()     取得匹配元素前面紧邻的同辈元素
siblings() 取得匹配元素前后的所有同辈元素
closest()  取得最近的匹配元素
find()     取得匹配元素中的元素集合 包括子代和后代


30、你使用过jquery中的动画吗，是怎样用的？   [ 详细解释待定 ]

hide() 和 show() 同时修改多个样式属性。像高度、宽度、不透明度。
fadeIn() 和 fadeOut() fadeTo() 只改变不透明度
slideUp() 和 slideDown() slideToggle() 只改变高度
animate() 属于自定义动画的方法


30、在 jQuery 中你有没有编写过插件，插件有什么好处？你编写过那些插件？它应该注意那些？

插件的好处:对已有的一系列方法或函数的封装，以便在其他地方重新利用，方便后期维护和提高开发效率
插件的分类：封装对象方法插件、封装全局函数插件、选择器插件
注意的地方： 1). 插件的文件名推荐命名为jQuery.[插件名].js，以免和其他的 JavaScript 库插件混淆
           2). 所有的对象方法都应当附加到jQuery.fn对象上，而所有的全局函数都应当附加到jQuery对象本身上
           3). 插件应该返回一个jQuery对象，以保证插件的可链式操作
           4). 避免在插件内部使用$作为jQuery对象的别名，而应使用完整的jQuery来表示，这样可以避免冲突或使用闭包来避免
           5). 所有的方法或函数插件，都应当以分号结尾,否则压缩的时候可能出现问题。在插件头部加上分号，这样可以避免他人的不规范代码给插件带来影响
           6). 在插件中通过$.extent({})封装全局函数，选择器插件，扩展已有的object对象，通过$.fn.extend({})封装对象方法插件


31、下面不属于ajax事件的是？  ( C )   解析 ： $.post() 是方法

    A、ajaxComplete(callback) B、ajaxSuccess(callback) C、$.post(url) D、ajaxSend(callback)


32、在jquery中，如果想要获取当前窗口的宽度值，下面哪个是实现该功能的？     ( A )
    A、width()  B、width(val)  C、width  D、innerWidth()


$(window).height();   浏览器当前窗口可视区域高度
$(document).height(); 浏览器当前窗口文档的高度
$(document.body).height(); 浏览器当前窗口文档body的高度
$(document.body).outerHeight(true);  浏览器当前窗口文档body的总高度 包括border padding margin
$(window).width();   浏览器当前窗口可视区域宽度
$(document).width(); 浏览器当前窗口文档对象宽度
$(document.body).width();  浏览器当前窗口文档body的高度
$(document.body).outerWidth(true); 浏览器当前窗口文档body的总宽度 包括border padding margin


33、 下列哪个操作是W3C标准定义的阻止事件向父容器传递？ ( C )

    A. e.preventDefault()       B. e.cancelBubble=true

    C. e.stopPropagation()      D. e.stopImmediatePropagation()

------------------------------------------------------------------------------------------------
bind() 研究下

封装函数 f，使 f 的 this 指向指定的对象
输入例子:

bindThis(function(a, b)
    {return this.test + a + b}
    , {test: 1})
(2, 3)

function bindThis(f, oTarget) {
   return f.bind(oTarget);
}

function bindThis(f, oTarget) {
    return function(){

            var arg=Array.prototype.slice.call(arguments,0);

        return f.apply(oTarget,arg);
    }
}

输出例子:

6


题目描述
获取 url 中的参数
1. 指定参数名称，返回该参数的值 或者 空字符串
2. 不指定参数名称，返回全部的参数对象 或者 {}
3. 如果存在多个同名参数，则返回数组
输入例子:

getUrlParam('http://www.nowcoder.com?key=1&key=2&key=3&test=4#hehe', 'key')


输出例子:

['1', '2', '3']

function getUrlParam(sUrl, sKey) {
    var pram=sUrl.split("?")[1].split("#")[0].split("&");
    var json={};

    for(var i=0;i<pram.length;i++){
        var key=pram[i].split('=')[0];
        var value=pram[i].split('=')[1];

        if(!json[key]){
            json[key]=[];
        }
        json[key].push(value);
    }

    if(sKey){
        return json[sKey].length>1?json[sKey]:json[sKey].join("");
    }else{
    	return json;
    }

}

牛人  a，模式的匹配项；k，第一个捕获组的匹配项；v，第二个捕获组的匹配项。
function getUrlParam(sUrl,sKey){
    var result = {};
    sUrl.replace(/\??(\w+)=(\w+)&?/g,function(a,k,v){
        if(result[k] !== void 0){
            var t = result[k];
            result[k] = [].concat(t,v);
        }else{
            result[k] = v;
        }
    });
    if(sKey === void 0){
        return result;
    }else{
        return result[sKey] || '';
    }
}


题目描述
查找两个节点的最近的一个共同父节点，可以包括节点自身
输入描述:

oNode1 和 oNode2 在同一文档中，且不会为相同的节点

function commonParentNode(oNode1, oNode2) {
    if(oNode1.contains(oNode2)){
        return oNode1;
    }else{
        return arguments.callee(oNode1.parentNode,oNode2);
    }
}



题目描述
为 Array 对象添加一个去除重复项的方法
输入例子:

[false, true, undefined, null, NaN, 0, 1, {}, {}, 'a', 'a', NaN].uniq()


输出例子:

[false, true, undefined, null, NaN, 0, 1, {}, {}, 'a']

Array.prototype.uniq = function () {
     var resArr = [];
   var flag = true;

   for(var i=0;i<this.length;i++){
       if(resArr.indexOf(this[i]) == -1){
           if(this[i] != this[i]){   //排除 NaN
              if(flag){
                   resArr.push(this[i]);
                   flag = false;
              }
           }else{
                resArr.push(this[i]);
           }
       }
   }
    return resArr;
}


if(! "a" in window){
    var a = 1;
}
alert(a);
请问 a 的结果是什么？
undefined





填写内容让下面代码支持a.name = “name1”; b.name = “name2”;


