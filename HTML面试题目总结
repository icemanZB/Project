HTML 面试整理：

1、 在怪异模式和传统模式下区别？

    IE和标准的盒模型是由：margin、border、padding、content 组成

    IE 盒子模型的 content 部分包含了 border 和 padding  即宽度包含了border和padding

    W3C盒子模型的 content 部分不包含其他部分


2、不换行必须设置 word-break、white-space


3、font:italic bold small-caps 1em/140% "lucida Grande",sans-serif; 拆分开来是什么？

font-style:italic;  font-weight:bold;

font-variant:small-caps; 此属性设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写,
                         但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。

font-family:"Lucida Grande",sans-serif; font-size:1em; line-height:140%;


4、简述 border:none; 以及 border:0; 的区别，并给出使用建议。

border:none;表示边框样式无;border:0;表示边框宽度为0;
当定义了border:none,即隐藏了边框的显示，实际就是边框宽度为0。
当定义边框时,必须定义边框的显示样式，因为边框默认样式为不显示 none ，所以仅设置边框宽度，由于样式不存在，边框的宽度也自动被设置为0。


5、为一个图片设置成背景图像后，设置背景图像在纵向和横向上平铺，下面哪个是实现该功能的？ (单选)  B
   A、no-repeat B、repeat C、repeat-x D、repeat-y
   考点：css的背景background (repeat)


6、想要设置一个对象外的线条轮廓的样式为虚线边框，用_______________实现该功能。
   考点：css 的轮廓 outline ( outline-style: dashed ) 注释：如果规定了 !DOCTYPE，则 IE8 支持 outline 属性。


7、在css中，如果想要阻止计数器增加的，用__________________来实现。
   考点：css的内容content ( counter-increment : none )


8、在编写css样式的时候，如果想要设置标记容器和主容器之间的补白，用_______________来表示。
   考点：css 的列表 ( marker-offset )


9、如果想设置一个对象内文本的流动和方向，用_______________标签来实现，该标签有两个值，分别是_____________、______________。
   考点：css的文本Text （ text-layout-flow，horizontal、vertical-ideographic）


10、DOCTYPE( 文档类型 )的作用是什么？兼容模式还是标准模式如何区分？它们有何意义？

1). <!doctype>声明必须处于HTML文档的头部，在<html>标签之前，HTML5中不区分大小写

2). <!doctype>不是一个HTML标签，是一个用于告诉浏览器当前 HTML 文档使用哪种 HTML 或 XHTML 规范

3). 现代浏览器的 HTML 布局引擎通过检查 doctype 决定使用兼容模式还是标准模式对文档进行渲染
    Standards ( 标准 )模式( 也就是严格呈现模式 )用于呈现遵循最新标准的网页，严格模式的排版 和 JS 运作模式是以该浏览器支持的最高标准运行
    而在混杂模式中( 兼容模式 )，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作，用于呈现为传统浏览器而设计的网页

4). 在HTML4.01中<!doctype>声明指向一个DTD，由于HTML4.01基于SGML，所以 DTD 指定了标记规则以保证浏览器正确渲染内容

5). HTML5不基于SGML，所以不用指定DTD



11、CSS hacks技巧？

CSS hack技巧 _、 *、 +、 \9、 !important

_width 针对于IE6

*width、+width 针对于IE6、7

color: red\9; /* IE10以及以下版本浏览器 */

*+html 与 *html 是 IE 特有的标签，firefox暂不支持.

*+html 又为IE7特有标签 ( 但是测试*html兼容IE6-10。*+兼容IE7-10 )

!important 在IE中会被忽视，IE6、7、8不识别，IE9+( 包括IE9 )是识别的

<!--[if IE 6]>
    Special instructions for IE 6 here
<![endif]-->


12、http状态码？

Web服务器用来告诉客户端，发生了什么事，也就是一种快速解决问题的方式。
200：OK，服务器成功处理了请求。
301/302: Moved Permanently(重定向),请求的URL已移走,一个是永久转移,一个是临时转移。
         Response中应该包含一个Location URL, 说明资源现在所处的位置。
304：Not Modified(未修改),客户的缓存资源是最新的,要客户端使用缓存。
404：HTTP/1.1 404 Not Found,服务器无法找到所请求的URL。
501：Internal Server Error,服务器遇到一个错误,使其无法对请求提供服务。
503：Service Unavailable(未提供此服务),服务器目前无法为请求服务服务,但过一段时间就可以恢复服务。
1XX信息性状态码。
2XX成功状态码。
3XX重定向状态码。
4XX客户端错误状态码。
5XX服务器错误状态码。


13、浏览器对CSS的匹配原理？

浏览器CSS匹配不是从左到右进行查找，而是从右到左进行查找。比如div#divBox p span.red{ color:red; }
浏览器的查找顺序如下：先查找 html 中所有 class="red" 的 span 元素，找到后再查找其父辈元素中是否有p元素
再判断 p 的父元素中是否有 id 为 divBox 的 div 元素，如果都存在则CSS匹配上。
浏览器从右到左进行查找的好处是为了尽早过滤掉一些无关的样式规则和元素。
firefox称这种查找方式为 keyselector (关键字查询),所谓的关键字就是样式规则中最后(最右边)的规则,上面的key就是span.red。


14、HTML 与 XHTML——二者有什么区别？

1). 所有的标记都必须要有一个相应的结束标记
2). 所有标签的元素和属性的名字都必须使用小写
3). 所有的 XML 标记都必须合理嵌套
4). 所有的属性必须用引号 "" 括起来
5). 把所有 < 和 & 特殊符号用编码表示
6). 给所有属性赋一个值
7). 不要在注释内容中使 "–"
8). 图片必须有说明文字


15、CSS中 link 和 @import 的区别？

1). link 属于 HTML 标签，而@import是CSS提供的
2). 页面被加载的时，link 会同时被加载，而 @import 引用的 CSS 会等到页面被加载完再加载
3). 由于@import是CSS2.1提出的，所以老的浏览器不支持，@import只有在IE5以上的才能识别，而link标签无此问题
4). link 方式的样式的权重高于 @import 的权重
5). 使用 dom 控制样式时的差别，当使用 JavaScript 控制 dom 去改变样式的时候，只能使用 link 标签，因为@import不是 dom 可以控制的


16、position 的 absolute 与 fixed 共同点与不同点？
共同点：
    1). 改变行内元素的呈现方式，display 被置为 block
    2). 让元素脱离文档流，不占据空间
    3). 默认会覆盖到非定位元素上
不同点:
absolute 的 "根元素" 是可以设置的，而 fixed 的 "根元素" 固定为浏览器窗口。当你滚动网页，fixed元素与浏览器窗口之间的距离是不变的

相对定位 : position:relative
1、不影响元素本身的特性 (该是块还是块,是内嵌还是内嵌)
2、不使元素脱离文档流 (文档流就是页面中所占的位置，存在就是没有脱离文档流)
3、如果没有定位偏移量，对元素本身没有任何影响
4、默认撑满整行
5、不能使内嵌支持宽高

绝对定位 ( absolute ) :
1、使元素脱离文档流
2、使内嵌元素支持宽高
3、块属性标签内容撑开宽度
4、如果有定位父级相对于定位父级发生偏移，没有定位父级相对于整个文档发生偏移
absolute 父级没有 relative ，相对于浏览器左上角进行定位(html)，如果清楚了body，html的默认margin、padding值，那么是一样的


17、瀑布流布局 或者 流式布局 是否有了解？

瀑布流布局: 采用绝对定位来给每张图片定位
流式布局: 采用浮动式给模块定位，可以做出响应式布局



18、子元素选择器 和后代选择器元素有什么区别

css选择器中的 '>' 如果不希望选择任意的后代元素，而是只选择某个元素的子元素,使用子元素选择器(Child selector)
E > F 子元素选择器,匹配所有E元素的子元素F
<style type="text/css">
	h1 > strong {color:red;}  /* 就只有第一个h1下面的strong文字变红 */
	h1 strong { color:blue;}  /* h1 下的所有strong都会变红 */
</style>
<h1>
	This is
	<strong>very</strong>
	<strong>very</strong>
	important.
</h1>



19、line-height的属性值有几种单位的表达形式，分别有什么区别？

px   像素  像素px是相对于显示器屏幕分辨率而言的
1em = 16px  em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。
em有如下特点：1). em的值并不是固定的  2). em 会继承父级元素的字体大小
%   百分比



20、颜色值的表达方式有多少种，一般怎么去使用？

1). 16进制 #ffffff
2). 直接写英文  red
3). rgb数字范围 rgb(255,255,255)
4). rgba(255,255,255,.3)  支持透明



21、background-size 有多少个默认的属性值，效果分别是怎么样的？

background-size:10px 20px 直接写数字 第一个值设置宽度，第二个值设置高度
background-size:10% 20% 百分比设置
background-size:cover  屏幕 扩充整个背景 自动适应元素
background-size:contain  图像扩展至最大尺寸 高度 宽度相同



22、flex是啥？能干啥

-webkit-box-flex  他可以将父元素的可用空间平均分配空间
.demo {
    color: #fff;
    display: -webkit-flex;
    text-align: center;
}

.demo .item {
    line-height: 40px;
    background-color: #ddd;
}

<div class="demo">
    <div class="item" style="width:100px">width:100px;</div>
    <div class="item" style="flex:2">flex: 2;</div>
    <div class="item" style="flex:1">flex: 1;</div>
</div>



23、background:#fff url(…) 50% 30%/50% 30% no-repeat;这个拆分后分别有什么属性？

background-color:#fff背景颜色白色
background-img: url图片覆盖在颜色上
background-repeat图片不重复
50% 30%/50% 30%  [background-position] / [ background-size]
注：background: [background-color] [background-image] [background-repeat]
                [background-attachment] [background-position] / [ background-size]
                [background-origin] [background-clip];


24、border-radius:50px 10px 30px 5px/5px 5px 30px 50px; 这个效果是什么，为什么会这样？

画出不规则的圆角
左上角 X轴为50px  Y轴5px
右上角 X轴为10px  Y轴5px
右下角 X轴为 30px  Y轴30px
左下角 X轴为 5px   Y轴50px


25、animation 怎么让动画在最后一帧的时候停下来，只让动画运动一次并停留在最后一帧？

animation-fill-mode: forwards;   用来定义元素在动画结束后的样子,默认是none
animation-iteration-count:1;     动画只播放一次


26、-webkit-mask 的使用方式，原理是什么？
蒙板可以是CSS3渐变或者半透明的PNG图片。蒙板元素的alpha值为0的时候会覆盖下面的元素，为1的时候会完全显示下面的内容
遮罩层
.box{
	background: url(img/image.jpg) repeat;
	-webkit-mask: url(img/mask.png);
}


27、在HTML5中input标签新增了多少个类型，分别是什么，都有什么作用？

1). Input 类型 - email 在提交表单时，会自动验证 email 域的值。
2). Input 类型 - url 在提交表单时，会自动验证 url 域的值。
3). Input 类型 - number 只能输入数字
4). Input 类型 - range
5). range 类型用于应该包含一定范围内数字值的输入域。
6). range 类型显示为滑动条。
7). Input 类型 - date( 日期选择器 )


28、在手机端 webkit 内核的浏览器中，如果要美化表单元素，关键的一个属性是什么 ？

-webkit-appearance:none;  禁用表单input、select元素的默认外观

补充： ::-ms-expand 适用于表单选择控件下拉箭头的修改
select::-ms-expand {
display: none;
}
::-ms-check 适用于表单复选框或单选按钮默认图标的修改
input[type=radio]::-ms-check,
input[type=checkbox]::-ms-check{
display: none;
}
禁用 PC 端表单输入框默认清除按钮
input[type=text]::-ms-clear,
input[type=tel]::-ms-clear,
input[type=number]::-ms-clear{
display: none;
}


29、哪些地方会出现css阻塞，哪些地方会出现js阻塞？

js 的阻塞特性：所有浏览器在下载 JS 的时候，会阻止一切其他活动，比如其他资源的下载，内容的呈现等等。直到 JS 下载、解析、执行完毕后才开始继续并行
下载其他资源并呈现内容。为了提高用户体验，新一代浏览器都支持并行下载 JS，但是 JS 下载仍然会阻塞其它资源的下载( 例如：图片，css文件等)。
由于浏览器为了防止出现 JS 修改 DOM 树，需要重新构建 DOM 树的情况，所以就会阻塞其他的下载和呈现。
嵌入 JS 会阻塞所有内容的呈现，而外部 JS 只会阻塞其后内容的显示，两种方式都会阻塞其后资源的下载。

CSS 本来是可以并行下载的，在IE6 下 CSS 都是阻塞加载
当 CSS 后面跟着嵌入的 JS 的时候，该 CSS 就会出现阻塞后面资源下载的情况
因为浏览器会维持 html 中 css 和 js 的顺序，样式表必须在嵌入的 JS 执行前先加载、解析完。而嵌入的 JS 会阻塞后面的资源加载，
所以就会出现上面 CSS 阻塞下载的情况。


30、IE 各版本和 chrome 可以并行下载多少个资源?

浏览器并发请求数：同一时间针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻止。
1. IE6 2 个并发
2. IE7 升级之后的 6 个并发，之后版本也是 6 个
3. Firefox，chrome 也是6个


31、列举可继承和不可继承的属性？
所谓css的继承是指被包在内部的标签将拥有外部标签的样式性质。继承特性最典型的应用通常发挥在整个网页的样式预设
body{ color:red;} 但这样写，在有些浏览器中会使除表格之外的文本变成蓝色。
body,table,th,td{color:blue}所以要写成这样表格内的文字也会变成蓝色。

1). 不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、
position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、overflow。

2). 所有元素可继承：visibility 和 cursor。

3).内联元素可继承：line-height、color、font、font-family、font-size、font-style、font-weight、text-decoration、text-shadow
letter-spacing、word-spacing、text-transform。

4). 块状元素可继承：text-indent 和 text-align。
5). 列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。
6). 表格元素可继承：border-collapse。


32、CSS3新增伪类举例？
1). p:first-of-type 选择属于其父元素的首个元素的每个元素。
2). p:last-of-type  选择属于其父元素的最后元素的每个元素。
3). p:only-of-type  选择属于其父元素唯一的元素的每个元素。
4). p:only-child    选择属于其父元素的唯一子元素的每个元素。
5). p:nth-child(2)  选择属于其父元素的第二个子元素的每个元素。
6). :enabled :disabled 控制表单控件的禁用状态。
7). :checked 单选框或复选框被选中。


33、CSS中能够将对象从文档流中抽出的方式 ？
1). absolute fixed
2). float也脱离文档流。浮动元素脱离文档流，不占据空间


34、position 属性有哪些？

1). absolute 生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位
2). fixed 相对于浏览器窗口进行定位
3). relative 生成相对定位的元素，相对于其正常位置进行定位
4).	static 默认值 没有定位，元素出现在正常的流中
5).	inherit 规定从父元素继承 position 属性的值


35、CSS3有哪些新特性？

1). CSS3实现圆角( border-radius )、阴影( box-shadow )、对文字加特效( text-shadow )、线性渐变( gradient )、运动( transform )
transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);/* 旋转,缩放,定位,倾斜 */
2). 增加了更多的CSS选择器
3). rgba() 支持透明
4). 媒体查询
5). 多栏布局


36、为什么要初始化CSS样式？

因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。


37、对BFC规范的理解？
BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。
(W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用 )

触发元素的 BFC( 块级格式化上下文 ) 来达到清浮动，该元素内部布局和定位和外部元素互不影响( 除非内部盒子建立了新的BFC )
可以理解为 BFC 建立了一个隔离的独立容器
触发 BFC的属性  1)、float 的值不为 none;
               2)、overflow 值不为 visible;
               3)、display 取值为 inline-block、table-cell、table-caption、flex、inline-flex 之一的元素
               4)、绝对定位元素 ( position 取值为 absolute 或 fixed )

BFC 作用     1). 可以包含浮动元素     2). 不被浮动元素覆盖    3). 阻止父子元素的margin折叠



38、清除浮动的几种方法？

Float是一种布局方式，它定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中任何元素都可以浮动。
浮动元素会生成一个块级框，而不论它本身是何种元素。 在布局过程中也经常会使用它来达到左右并排布局的效果。

1)、 .clear{zoom:1;}
     .clear:after{content:"";display:block;clear:both;}
     <div class="box clear">
        <div class="div"></div>
     </div>

2)、在浮动元素下加 <br clear="all"/>  但是不符合w3c的标准
    <div class="box">
        <div class="div"></div>
        <br clear="all"/>
    </div>

3)、浮动元素的父级有宽度(高度)就不用清除浮动

4)、overflow:hidden 清除浮动 加在父级上的样式 IE6 不支持(如果没有触发haslayout)，需要在父级上宽度 或者配合 zoom:1; (不常用)

5)、给父级加上浮动 就可以清除浮动 (这个方法不是很好,会使margin失效)
    .box{ width:300px;margin:0 auto;border:10px solid #000; float:left;}
    .div{ width:200px;height:200px;background:red;float:left;}
    /*
        清浮动
        1.给父级也加浮动(不居中了)
    */

    <div class="box">
        <div class="div"></div>
    </div>

6)、给父级加inline-block 他可以不脱离文档流,达到清除浮动的效果,这个时候如果给这个父级的inline-block
    在加个父级,那么他就可以撑开父级的高度,问题是他还是会使margin失效,想让他居中,还得在父级加text-algin:center

7)、通过给浮动元素的父级加position:absolute; 或 position:fixed; 来清浮动
    通常用于某个元素是绝对定位,里面的那些元素有浮动,那就不需要在浮动元素的父级清除浮动

    #box1{border:30px solid red; position:absolute;}
    #box2{ width:300px; height:300px; background:blue; float:left;}
    <div id="box1">
        <div id="box2"></div>
    </div>

8、在浮动元素下加<div class="clear"></div>
  .clear{ height:0px;overflow:hidden;clear:both;}
  但是在ie6下,块元素有最小高度，即当height<19px时，默认为19px，解决方法：font-size:0;或overflow:hidden;
    .box{ width:300px;margin:0 auto;border:10px solid #000;}
    .div{ width:200px;height:200px;background:red;float:left;}
    .clear{ height:0px;font-size:0;clear:both;}

    <div class="box">
        <div class="div"></div>
        <div class="clear"></div>
    </div>



39、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？

1). HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。
2). 拖拽释放( Drag and drop ) API
3). 语义化更好的内容标签( header、nav、footer、aside、article、section )
4). 音频、视频API( audio、video )
5). 画布( Canvas ) API
6). 地理(Geolocation) API
7). 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；
8). sessionStorage 的数据在浏览器关闭后自动删除
9). 表单控件 ( calendar、date、time、email、url、search )
10). 新的技术 webworker、 websocket、 Geolocation
HTML 5 移除的元素
1). 纯表现的元素：basefont、big、center、font
2). 对可用性产生负面影响的元素：frame、frameset、noframes；
HTML5兼容问题：
IE8/IE7/IE6支持通过document.createElement方法产生的标签，可以利用这一特性让这些浏览器支持HTML5新标签，
当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架


40、什么叫优雅降级和渐进增强 ？

优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作
由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了，为那些无法支持功能的浏览器增加候选方案
在旧式浏览器上以某种形式降级体验却不至于完全失效。

渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能，向页面增加无害于基础浏览器的额外样式和功能的。
当浏览器支持时，它们会自动地呈现出来并发挥作用。
核心原则如下:
- 所有浏览器都必须能访问基本内容
- 所有浏览器都必须能使用基本功能
- 所有内容都包含在语义化标签中
- 通过外部CSS提供增强的布局
- 通过非侵入式、外部javascript提供增强功能
- end-user web browser preferences are respected


41、http与https的主要区别 ？

在URL前加https:// 前缀表明是用SSL加密的。 你的电脑与服务器之间收发的信息传输将更加安全。
Web 服务器启用 SSL 需要获得一个服务器证书并将该证书与要使用SSL的服务器绑定。
http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。
http的连接很简单,是无状态的。
HTTPS协议是由 SSL+ HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全


42、怎么优化你的CSS ？

所谓高效的CSS就是让浏览器在查找style匹配的元素的时候尽量进行少的查找。

1). 不要在ID选择器前使用标签名
例如：一般写法div#divBox  更好写法：#divBox
解释：因为ID选择器是唯一的，加上div反而增加不必要的CSS匹配。

2). 不要在 class 选择器前使用标签名
例如：一般写法：span.red 更好写法：.red
解释：同第一条，但如果你定义了多个.red，而且在不同的元素下是样式不一样则不能去掉，比如你css文件中定义如下：
p.red{color:red;}
span.red{color:#ff00ff}
如果是这样定义的就不要去掉去掉后就会混淆，不过建议最好不要这样写

3、尽量少使用层级关系
例如：一般写法：#divBoxp.red{color:red;} 更好写法：.red{color:red;}

4、使用class代替层级关系
例如： 一般写法：#divBoxullia{display:block;}
更好写法：.block{display:block;}

5、在css渲染效率中id和class的效率是基本相当的
class 最在第一次载入中被缓存，在层叠中会有更加好的效果，在根部元素采用id会具有更加好( id有微妙的速度优势 )
实际的优化建议

1).	创建合法的 HTML 和 CSS ，别忘了制定文件编码，Style 应该写在 head 标签中，script 标签应该加载 body 标签结束的位置。
2).	试着简化和优化 CSS 选择器，将嵌套层数控制在最小。以下是 CSS 选择器的性能排行（从最快的开始）：
a.	ID选择器：#id
b.	class选择器： .class
c.	标签: div
d.	相邻的兄弟元素：a + i
e.	父元素选择器： ul > li
f.	通配符选择器： *
g.	伪类和伪元素： a:hover ，你应该记住浏览器处理选择器是从右向左的，这也就是为什么最右面的选择器会更快——#id或.class。



43、前端开发的优化问题 ？

- content方面
    1. 减少HTTP请求：合并文件、CSS精灵、inline Image
    2. 减少DNS查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询
    3. 避免重定向：多余的中间访问
    4. 使Ajax可缓存
    5. 非必须组件延迟加载
    6. 未来所需组件预加载
    7. 减少DOM元素数量
    8. 将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量
    9. 减少iframe数量
    10. 不要404

- Server方面
    1. 使用CDN
    2. 添加Expires或者Cache-Control响应头
    3. 对组件使用Gzip压缩
    4. 配置ETag
    5. Flush Buffer Early
    6. Ajax使用GET进行请求
    7. 避免空src的img标签
- Cookie方面
    1. 减小cookie大小
    2. 引入资源的域名不要包含cookie
- css方面
    1. 将样式表放到页面顶部
    2. 不使用CSS表达式
    3. 使用<link>不使用@import
    4. 不使用IE的Filter
- Javascript方面
    1. 将脚本放到页面底部
    2. 将javascript和css从外部引入
    3. 压缩javascript和css
    4. 删除不需要的脚本
    5. 减少DOM访问
    6. 合理设计事件监听器
- 图片方面
    1. 优化图片：根据实际颜色需要选择色深、压缩
    2. 优化css精灵
    3. 不要在HTML中拉伸图片
    4. 保证favicon.ico小并且可缓存
- 移动方面
    1. 保证组件小于25k
    2. Pack Components into a Multipart Document



44、浏览器的内核分别是什么？

IE浏览器的内核 Trident、Mozilla 的 Gecko、Chrome的 Blink( WebKit的分支)、Opera内核原为Presto，现为Blink；


45、 兼容问题？

1)、 IE6 下最小高度为19px  ( overflow:hidden; )
2)、 IE6 下元素浮动，并排在同一行的元素都要加浮动，否则IE6会将两个元素之间多出3个像素的距离
3)、 IE6 下面有双边距的bug 产生条件 : 1、块元素 2、浮动 3、横向的margin 值   ( display:inline; )
4)、 IE6 7下 li的几px间隙问题, 在IE6 7 下 li本身没有浮动,但是内容浮动了,那么li就会多出来4px的间隙  (li加 vertical-align:top; )
5)、 IE6 有个特性，子元素会撑开父级设置好的宽高、在标准浏览器下子元素不会撑开父级设置好的宽高 ( overflow:hidden; 不建议子集的宽高超过父级的宽高 )
6)、 IE6 父级的 overflow:hidden; 是包不住子级的相对定位的  解决方案：父子级加相对定位即可(让父级变成定位元素，加绝对定位也是可以的)
7)、 IE6 绝对定位的定位父级的宽高都为奇数的话，right 和bottom都会有1像素的偏差  解决方案: 避免宽高设置为奇数
8)、 IE6 如果宽度需要内容撑开，就给它里面的块元素加上浮动 ( 问题的产生:由于块元素默认撑满整行,IE6下子元素默认会撑开父级设置好的宽度 )
9)、 解决margin传递到父级的问题  解决方案：父子级中有一个浮动即可,在IE6下也没问题
10)、当IE6下最小高度问题，和 li 的间隙问题共存的时候     解决方案：给li加浮动
11)、IE6  绝对定位元素和浮动元素并列，绝对定位元素消失    解决方案：所以咱们只要让他们俩不处于同级就可以避免这个bug
12)、IE6 input 空隙问题      解决方案：给input元素添加float
13)、IE6 margin 负值的bug    margin 负值移出去的部分在IE6下都被父级给截掉了，加 position:relative; 即可



46、超链接访问过后hover样式就不出现了，被点击访问过的超链接样式不在具有hover和active了？

L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}
a:link {color: #FF0000} /* 未访问的链接 */
a:visited {color: #00FF00} /* 已访问的链接 */
a:hover {color: #FF00FF} /* 当有鼠标悬停在链接上 */
a:active {color: #0000FF} /* 被选择的链接 */



47、语义化的理解？

1).	用正确的标签做正确的事情，恰当地表示文档结构
2).	html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析
3). 在没有样式的情况下也以一种文档格式显示，并且盲人使用读屏器更好地阅读
4). 搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO
5). 团队项目的可持续运作及维护
6). CSS 命名的语义化，为 HTML 标签添加有意义的 class、id 补充未表达的语义，通过添加符合规则的 class 描述信息


48、	frame有那些缺点？

1). iframe 会阻塞主页面的onload事件
2). iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载
3). 使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过JavaScript，动态给iframe添加src属性值，这样可以可以绕开以上两个问题


49、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？( 流程说的越详细越好 )

1).  查找浏览器缓存
2).  DNS解析、查找该域名对应的IP地址、重定向( 301 )、发出第二个GET请求
3).	 进行HTTP协议会话
4).	 客户端发送报头( 请求报头 )
5).	 服务器回馈报头( 响应报头 )
6).	 html文档开始下载
7).	 文档树建立，根据标记请求所需指定MIME类型的文件
8).	 文件显示
    加载：根据请求的URL进行域名解析，向服务器发起请求，接收文件（HTML、JS、CSS、图象等）。
    解析：对加载到的资源( HTML、JS、CSS等 )进行语法解析，建议相应的内部数据结构( 比如HTML的DOM树，JS的( 对象 )属性表，CSS的样式规则等等 )

完整版

1. 在浏览器地址栏输入URL
2. 浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤
    1. 如果资源未缓存，发起新请求
    2. 如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。
    3. 检验新鲜通常有两个HTTP头进行控制 Expires 和 Cache-Control
        - HTTP1.0 提供Expires，值为一个绝对时间表示缓存新鲜日期
        - HTTP1.1 增加了Cache-Control: max-age=，值为以秒为单位的最大新鲜时间
3. 浏览器解析URL获取协议，主机，端口，path
4. 浏览器组装一个HTTP(GET)请求报文
5. 浏览器获取主机ip地址，过程如下：
    1. 浏览器缓存
    2. 本机缓存
    3. hosts文件
    4. 路由器缓存
    5. ISP DNS缓存
    6. DNS递归查询( 可能存在负载均衡导致每次IP不一样 )
6. 打开一个 socket 与目标 IP 地址，端口建立TCP链接，三次握手如下：
    1. 客户端发送一个 TCP 的 SYN=1，Seq=X  的包到服务器端口
    2. 服务器发回 SYN=1，ACK=X+1，Seq=Y 的响应包
    3. 客户端发送 ACK=Y+1，Seq=Z
7. TCP链接建立后发送 HTTP 请求
8. 服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序
9. 服务器检查 HTTP 请求头是否包含缓存验证信息，如果验证缓存新鲜，返回304等对应状态码
10. 处理程序读取完整请求并准备 HTTP 响应，可能需要查询数据库等操作
11. 服务器将响应报文通过TCP连接发送回浏览器
12. 浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下：
    1. 主动方发送 Fin=1， Ack=Z， Seq=X 报文
    2. 被动方发送 ACK=X+1， Seq=Z 报文
    3. 被动方发送 Fin=1， ACK=X， Seq=Y 报文
    4. 主动方发送 ACK=Y， Seq=X 报文
13. 浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同
14. 如果资源可缓存，进行缓存
15. 对响应进行解码( 例如 gzip 压缩 )
16. 根据资源类型决定如何处理( 假设资源为HTML文档 )
17. 解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严格的先后顺序，以下分别解释
18. 构建DOM树：
    1. Tokenizing：根据 HTML 规范将字符流解析为标记
    2. Lexing：词法分析将标记转换为对象并定义属性和规则
    3. DOM construction：根据HTML标记关系将对象组成DOM树
19. 解析过程中遇到图片、样式表、js文件，启动下载
20. 构建CSSOM树：
    1. Tokenizing：字符流转换为标记流
    2. Node：根据标记创建节点
    3. CSSOM：节点创建CSSOM树
21. 根据DOM树和CSSOM树构建渲染树
    1. 从DOM树的根节点遍历所有可见节点，不可见节点包括：1) script、meta 这样本身不可见的标签。2) 被css隐藏的节点，如display: none
    2. 对每一个可见节点，找到恰当的CSSOM规则并应用
    3. 发布可视节点的内容和计算样式
22. js解析如下：
    1. 浏览器创建 Document 对象并解析 HTML，将解析到的元素和文本节点添加到文档中，此时 document.readystate 为loading
    2. HTML解析器遇到没有 async 和 defer 的script时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，
       并且在脚本下载和执行时解析器会暂停。这样就可以用 document.write()把文本插入到输入流中。
       同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作 script 和他们之前的文档内容
    3. 当解析器遇到设置了 async 属性的script时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载
       异步脚本禁止使用 document.write()，它们可以访问自己script和之前的文档元素
    4. 当文档完成解析，document.readState 变成 interactive
    5. 所有 difer 脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用document.write()
    6. 浏览器在 Document 对象上触发 DOMContentLoaded 事件
    7. 此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行
       document.readState 变为 complete ，window 触发 load 事件
23. 显示页面 ( HTML解析过程中会逐步显示页面 )


50、块级元素和行内元素都有哪些？
块级元素：div、p、h1-h6、ul、ol、dl、form、hr
行内元素：a、b、i、span、strong、em、font

内联元素 : 1、 默认同行,可以继续跟同类型标签
          2、 内容撑开宽度
          3、 不支持宽高
          4、 不支持上下margin和padding
          5、 代码换行被解析

块： 1、默认独占一行显示   2、没有宽度时，默认撑满一排

img 既不是块也不是内联 它其实是 inline-block(能在一行显示，并且支持宽高 可以内容撑开宽度)

inline-block(一行内的块) : 1、能在一行显示
                          2、行内属性标签支持宽高
                          3、没有宽度的时候,内容撑开宽度

但 inline-block 标签换行会被解析(会有间隙)
span,div{background:blue; width:100px; height:100px; display:inline-block;}

<span>区分样式</span>
<span>区分样式</span>
<span>区分样式</span>
<div>块</div>
<div>块</div>
<div>块</div>

实际上那点间歇也就是一个空格的大小，那么空格的大小就是页面文字大小的一半
如果页面的文字大小为12px，那么空格的大小就为6px (浮动可以解决，不用inline-block)
IE6 7 不支持块属性标签的inline-block;



51、background 同时设置了背景颜色和背景图片的话，背景图片的优先级是高于背景颜色的

background-position:left; 如果第二个值不设置，默认是居中;反过来设置了bottom，没有设置第一个值，默认也是居中显示
                          如果给定的是一个数值100px，识别不了x、y，那么默认是x、y居中
                          如果给定的值是center，那么就是默认center center
                          如果写成 bottom left 浏览器解析也会变成 left bottom
                          设置数值是根据padding的左上角开始计算的


52、样式优先级 :

<ol>
    <li class="list list1" id="box" style="background:purple;"></li>
    <li class="list1 list"></li>
    <li class="list"></li>
    <li></li>
    <li></li>
    <li></li>
</ol>

1、类型(1)  <  class(10)  <  id(100)  <  style行间样式(1000) < js

2、就近原则,同级样式默认后者覆盖前者 li{backgroud:green;} li{background:red;}  结果是 red

3、ol li{background:green;} li{background:red;} 结果是 green

  类型原则符有自己的优先级 : ol li /* 相当于 1+1 */  li /* 相当于1 */

4、 class 选择符, 可以认为 是10 级别的

5、 .list{background:red;}/* 10 */ .list1{background:yellow;}/* 10 */
    <li class="list list1"></li> <li class="list1 list"></li>  结果 : yellow
    <li class="list list1"></li> <li class="list1 list"></li>  结果 : yellow
    名字的先后顺序和样式的先后顺序是没有任何关系的,样式的优先级是根据样式的权重和抒写顺序是有关系的
    .list1 写在后面，所以他优先级高

6、 高级选择符多的，样式优先级高 比如 #aa #bb #ccc >#dd #ww .qq

7、 相同的样式在CSS规则后添加了!important的优先于没有添加的


53、 浮动的特点

浮动：  1、使块元素在同一行显示
       2、使内嵌元素支持宽高
       3、没有宽度的时候，内容撑开宽度
       4、脱离文档流 (页面中可显示的对象在排列时所占用的位置叫文档流)


54、内容撑开宽度： 浮动、内联元素、inline-block、position:absolute，fixed;、table

55、使内嵌元素支持宽高：  position:absolute;、 float:left;

56、希望把某个元素移除你的视线：

  1、display:none;				显示为无
  2、visibility:hidden;	隐藏 （ 保留文档位置 ）
  3、width \ height:0;
  4、透明度
  5、left \ top
  6、拿一个白色DIV盖住它
  7、margin负值

57、不定宽高的元素水平垂直居中
.wrap{
    position:absolute;top:50%;left:50px;-webkit-transform:translate(-50%,-50%);
}

知道宽高的居中方法
div {
    width: 100px;
    height: 100px;
    background: red;
    position: absolute;
    left: 50%;
    top: 50%;
    margin-left: -50px; /* 宽度的一半 */
    margin-top: -50px; /* 高度的一半 */
}

58、单行文本溢出，显示省略号
.inaline{
    width:200px;
    overflow:hidden;
    white-space:nowrap;
    text-overflow:ellipsis;
}

59、多行文本溢出
.intwoline{
    display:-webkit-box !important;
    overflow:hidden;
    text-overflow:ellipsis;
    word-break:break-all;
    -webkit-box-orient:vertical;
    -webkit-line-clamp:2;
}


60、模拟固定定位
<style>
 // 这方法不是很好
 // 滚动条在document上面,给html设置overflow:hidden; 隐藏了滚动条
html{height:100%;overflow:hidden;}
body{margin:0; height:100%;overflow:auto;}  // overflow:auto; 滚动条就在body上面了
.box{height:2000px;}
.div{width:100px;height:100px;background:red; position:absolute;left:100px;top:100px;}
</style>
<div class="box">
	<div class="div"></div>
</div>


61、如果需要手动写动画，你认为最小时间间隔是多久，为什么？

多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60*1000ms ＝ 16.7ms


62、display:inline-block 什么时候会显示间隙？

移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing


63、position跟display margin，collapse，overflow，float这些特性相互叠加后会怎样

总的来说，可以把它看作是一个类似优先级的机制， "position:absolute" 和 "position:fixed" 优先级最高，有它存在的时候，浮动不起作用，
'display' 的值也需要调整； 其次，元素的 'float' 特性的值不是 "none" 的时候或者它是根元素的时候，调整 'display' 的值；
最后，非根元素，并且非浮动元素，并且非绝对定位的元素，'display' 特性值同设置值。
1). 'display' 的值为 'none'，那么 'position' 和 'float' 不起作用。在这种情况下，元素不产生框,因此浮动和定位无效。
2). 'position' 的值是 'absolute' 或 'fixed'，框就是绝对定位的，'float' 计算后的值应该是 'none'
     也就是说，当元素是绝对定位时，浮动失效，display:block。



64、display: none;与visibility: hidden;的区别？

1). display: none;会让元素完全从渲染树中消失，元素不占据任何空间；
    visibility: hidden;不会让元素从渲染树消失，元素继续占据空间，只是内容不可见

2). display: none;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示
    visibility: hidden;是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显式

3). 修改常规流中元素的 display 通常会造成文档重排。修改 visibility 属性只会造成本元素的重绘

    重排、重绘：http://blog.jobbole.com/46722/

4). 读屏器不会读取 display: none;元素内容；会读取visibility: hidden;元素内容


65、display: block; 和 display: inline; 的区别

block元素特点  1). 处于常规流中时，如果 width 没有设置，会自动填充满父容器
              2). 可以应用 margin、padding
              3). 在没有设置高度的情况下会扩展高度以包含常规流中的子元素
              4). 处于常规流中时布局时在前后元素位置之间 ( 独占一个水平空间 )
              5). 忽略 vertical-align
              6). 浮动或绝对定位时会转换为 block

inline元素特点  1). 水平方向上根据 direction 依次布局
               2). 不会在元素前后进行换行
               3). 受 white-space 控制
               4). margin、padding 在竖直方向上无效，水平方向上有效
               5). width、height 属性对非替换行内元素无效，宽度由元素内容决定
               6). 非替换行内元素(  p的内容、label的内容 )的行框高由 line-height 确定，替换行内元素( img、input、textarea、select )
                   的行框高由 height、margin、padding、border决定
               7). vertical-align 属性生效



66、PNG、GIF、JPG 的区别及如何选？

**GIF**   1). 8位像素，256色
          2). 无损压缩
          3). 支持简单动画
          4). 支持boolean透明

**JPEG**  1). 颜色限于256
          2). 有损压缩
          3). 可控制压缩质量
          4). 不支持透明
          5). 适合照片

**PNG**  1). 有 PNG8 和 truecolor PNG
         2). PNG8类似GIF颜色上限为256，文件小，支持alpha透明度，无动画
         3). 适合图标、背景、按钮



67、什么是FOUC?如何避免？

FOUC - Flash Of Unstyled Content 文档样式闪烁
<style type="text/css" media="all">@import "../fouc.css";</style> 而引用CSS文件的@import就是造成这个问题的罪魁祸首。
IE会先加载整个HTML文档的DOM，然后再去导入外部的CSS文件，因此，在页面DOM加载完成到CSS导入完成中间会有一段时间页面上的内容是没有样式的，
这段时间的长短跟网速，电脑速度都有关系。
解决方法：只要在<head>之间加入一个<link>或者<script>元素就可以了



68. 前端需要注意哪些SEO

1). 合理的 title、description、keywords：搜索对这三项的权重逐个减小，title 值强调重点即可，重要关键词出现不要超过2次，而且要靠前，
    不同页面 title 要有所不同；description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面 description 有所不同；
    keywords 列举出重要关键词即可

2). 语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页

3). 重要内容HTML代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取

4). 重要内容不要用js输出：爬虫不会执行js获取内容
5). 少用iframe：搜索引擎不会抓取iframe中的内容
6). 非装饰性图片必须加alt
7). 提高网站速度：网站速度是搜索引擎排序的一个重要指标



69、CSS选择器

1).通用选择器(*)：选择所有元素，不参与计算优先级，兼容性IE6+

2).id选择器(#X)：选择id值为X的元素，兼容性：IE6+

3).类选择器(.X)：选择 class 包含X的元素，兼容性：IE6+

4).后代选择器(X Y)：选择满足X选择器的后代节点中满足Y选择器的元素，兼容性：IE6+

5).元素选择器(X)：选择标所有签为X的元素，兼容性：IE6+

6). :link、：visited、：hover、：active、：focus 链接状态：选择特定状态的链接元素，L-V-H-A ，兼容性: IE4+

7). 直接兄弟选择器(X + Y)：在X之后第一个兄弟节点中选择满足Y选择器的元素，兼容性： IE7+ ( div + p 选择紧接在 <div> 元素之后的所有 <p> 元素 )

8).子选择器(X > Y)：选择X的子元素中满足Y选择器的元素，兼容性： IE7+   ( div > p 选取父元素是 <div> 元素的每个 <p> 元素 )

9).兄弟(X ~ Y)：选择X之后所有兄弟节点中满足Y选择器的元素，兼容性： IE7+

10).[attr]：选择所有设置了 attr 属性的元素，兼容性IE7+

11).[attr=value]：选择属性值刚好为value的元素

12).[attr~=value]：选择属性值刚好是value的元素

13).[attr|=value]：选择属性值刚好为 value 或者 value- 开头的元素

14).[attr^=value]：选择属性值以 value 开头的元素

15).[attr$=value]：选择属性值以 value 结尾的元素

16).[attr*=value]：选择属性值中包含 value 的元素

17).[:checked]：选择单选框，复选框，下拉框中选中状态下的元素，兼容性：IE9+

18).X:after, X::after ：after伪元素，选择元素虚拟子元素(元素的最后一个子元素)，CSS3中::表示伪元素。兼容性:after为IE8+，::after为IE9+

19). :hover ：鼠标移入状态的元素，兼容性a标签IE4+， 所有元素IE7+

20). :not(selector) ：选择不符合selector的元素，不参与计算优先级，兼容性：IE9+


70、解释一下外边距折叠( collapsing margins )，有什么规则？

毗邻的两个或多个 margin 会合并成一个margin，叫做外边距折叠。

规则如下  1). 两个或多个毗邻的普通流中的块元素垂直方向上的 margin 会折叠
         2). 浮动元素、inline-block元素、绝对定位元素的 margin 不会和垂直方向上的其他元素的 margin 折叠
         3). 创建了块级格式化上下文的元素，不会和它的子元素发生margin折叠
         4). 元素自身的 margin-bottom 和 margin-top 相邻时也会折叠



71、web 开发中会话跟踪的方法有哪些？

1). cookie  2). session  3). url重写  4). 隐藏input  5. ip地址



72、<img> 的 title 和 alt 有什么区别？

1. title 是[global attributes]之一，用于为元素提供附加的 advisory information。通常当鼠标滑动到元素上的时候显示。
2. alt是<img>的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性
   除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。



73、css sprite是什么，有什么优缺点？

概念：将多个小图片拼接到一个图片中，通过background-position 和元素尺寸调节需要显示的背景图
优点：
1). 减少HTTP请求数，极大地提高页面加载速度
2). 增加图片信息重复度，提高压缩比，减少图片大小
3). 更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现
缺点：
1). 图片合并麻烦
2). 维护麻烦，修改一个图片可能需要从新布局整个图片，样式



74、specified value,computed value,used value 计算方法

- specified value: 计算方法如下：
    1. 如果样式表设置了一个值，使用这个值
    2. 如果没有设置值，这个属性是继承属性，从父元素继承
    3. 如果没设置，并且不是继承属性，使用css规范指定的初始值

- computed value: 以 specified value 根据规范定义的行为进行计算，通常将相对值计算为绝对值，例如 em 根据font-size进行计算。
                  一些使用百分数并且需要布局来决定最终值的属性，如width，margin。百分数就直接作为 computed value
                  line-height 的无单位值也直接作为 computed value。这些值将在计算 used value 时得到绝对值。
                  computed value的主要作用是用于继承

- used value：属性计算后的最终值，对于大多数属性可以通过 window.getComputedStyle 获得，尺寸值单位为像素。
             以下属性依赖于布局：
            - background-position
            - bottom, left, right, top
            - height, width
            - margin-bottom, margin-left, margin-right, margin-top
            - min-height, min-width
            - padding-bottom, padding-left, padding-right, padding-top
            - text-indent


75、如何确定一个元素的包含块(containing block)

1). 根元素的包含块叫做初始包含块，在连续媒体中他的尺寸与viewport相同并且 anchored at the canvas origin
    对于paged media，它的尺寸等于page area。初始包含块的 direction 属性与根元素相同
2). position 为 relative 或者 static 的元素，它的包含块由最近的块级( display:block、list-item、table ) 祖先元素的内容框组成
3). 如果元素 position:fixed;对于连续媒体，它的包含块为viewport；对于paged media，包含块为page area
4). 如果元素 position:absolute;它的包含块由祖先元素中最近一个 position:relative、absolute、fixed的元素产生
5). 如果找不到定位的祖先元素，包含块为初始包含块


76、线程与进程的区别 ？

1). 一个程序至少有一个进程,一个进程至少有一个线程
2). 线程的划分尺度小于进程，使得多线程程序的并发性高
3). 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率
4). 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，
    由应用程序提供多个线程执行控制
5). 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，
    来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别


77、请说出三种减少页面加载时间的方法？

1). 优化图片
2). 图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方）
3). 优化CSS（压缩合并css，如 margin-top, margin-left...)
4). 网址后加斜杠（如www.campr.com/目录，会判断这个目录是什么文件类型，或者是目录。）
5). 标明高度和宽度(如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。
    当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了)
6). 减少http请求（合并文件，合并图片）



bootstrap 面试题整理：

1、以下说法正确的是 (  A B C D   )

A、<kbd>来表示用户输入      B、<var>用来表示变量       C、list-inline类会将所有的元素放置于同一行     D、<code>表示代码片段


2、哪些可以给文字加上背景？  ( A B C D )

A、bg-primary        B、bg-success        C、bg-info       D、bg-warning


3、有一个元素，需要在pc端显示而在手机端隐藏，需要使用的方法是？  ( B )

A、visible-xs-8 hidden-md    B、visible-md-8 hidden-xs    C、visible-md-8 hidden-sm    D、visible-sm-8 hidden-md


4、关于栅格系统，以下说法正确的是   ( A C D )

A、会有自动的padding样式    B、会有自动的margin样式     C、其字体默认为14px    D、其box-sizing默认为border-box


5、下列关于btn标签的说法正确的是  ( A B C D )

A、btn-group能将按钮组成按钮组    B、btn-toolbar能将btn做成复杂组件

C、btn-group可以嵌套使用         D、可以使用btn-group-lg，btn-group-sm来调整按钮大小


6、为了在input两侧添加额外元素，以下说法正确的是     ( A B D )

A、使用input-group来封装控件    B、使用input-group-addon来添加前置元素

C、使用input-group-tailon来添加后置元素   D、必须为input添加form-control类


7、假设当前屏幕分别率为1024×768，定义一个居中的占屏幕一半大小的表格的语句是  ( A B C D )

A、<TABLE ALIGN=”CENTER” WIDTH=”50%”></TABLE>    B、<TABLE ALIGN=”CENTER” WIDTH=”512″></TABLE>

C、<DIV ALIGN=”CENTER”><TABLE WIDTH=”512″></TABLE></DIV>     D、<CENTER><TABLE WIDTH=”50%”></TABLE></CENTER>


