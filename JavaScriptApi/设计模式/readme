设计模式原则，设计模式存在的根本原因是为了代码复用，增加可维护性。
1、开闭原则：对扩展开发，对修改关闭 ( 举例：高考试卷，只能添加附加题，而不能修改原来的卷子 )
2、里氏转换原则：子类继承父类，单独调用完全可以运行 ( 举例：盗版光盘 )
3、依赖倒转原则：引用一个对象，如果这个对象有底层类型，直接引用底层 ( 举例：三个和尚打水，直接可以从井里打水，然后搬回家，并不是把水都打出来
   放到一个桶里，在搬回家，这是不科学的)
4、接口隔离原则：每一个接口应该是一种角色 ( 举例：汽车里面的USB接口 )
5、合成/聚合复用原则：新的对象应使用一些已有的对象，使之成为新对象的一部分 ( 举例：手里有一些相机零件，而又去买了新的相机 )
6、迪米特原则：一个对象应对其他对象有尽可能少的了解  ( 举例：现实中的对象 )

工厂模式的概念解读
工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的
时候指定自己的对象类型( 抽象工厂 )。
这个模式十分有用，尤其是创建对象的流程赋值的时候，比如依赖于很多设置文件等。并且你会经常在程序里看到工厂方法，用于让子类定义需要创建的对象类型。

模式作用：
1、对象的构建十分复杂
2、需要依赖具体的环境创建不同的实例
3、处理大量具有相同属性的小对象


单例模式概念解读
单列就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这样就确保了一个类只有一个
实例对象。在JavaScript里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问对象。

模式的作用：
1、模块间通信
2、系统中某个类的对象只能存在一个
3、保护自己的属性和方法


构造函数模式概念解读
构造函数用于创建特定类型的对象，不仅声明了使用的对象，构造函数还可以接受参数以便第一次创建对象的时候设置对象的成员值。你可以自定义自己的构造
函数，然后在里面声明自定义类型对象的属性或方法。
在JavaScript中，构造函数通常是认为用来实现实例的，JavaScript没有类的概念，但是又特殊的构造函数。通过new关键字来调用自定义的构造函数，在
构造函数内部，this关键字引用的是新创建的对象。



代理模式概念解读
代理，顾名思义就是帮助别人做事，GoF对代理模式的定义如下：
    代理模式( Proxy )，为其他对象提供一种代理以控制对这个对象的访问。
    代理模式使得代理对象控制具体对象的引用。代理几乎可以是任何对象：文件，资源，内存中的对象，或者是一些难以复制的东西。

模式的作用：
1、远程代理 ( 一个对象将不同空间的对象进行局部代理 )
2、虚拟代理 ( 根据需要创建开销很大的对象，如渲染网页暂时用占位代替真图 )
3、安全代理 ( 控制真实对象的访问权限 )
4、智能指引 ( 调用对象代理处理另外一些事情如垃圾回收机制 )



建造者模式概念解读
建造者模式可以将一个复杂对象的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。也就是说如果我们用了建造者模式，那么用户就需要指定
需要建造的类型就可以得到它们，而具体建造的过程和细节就不需要知道了。建造者模式实际就是一个指挥者，一个建造者，一个使用指挥者调用具体建造者工作
得出结果的客户。
建造者模式主要用于" 分步构建一个复杂的对象 "，在这其中" 分步骤 " 是一个稳定的算法，而复杂对象的各个部分则经常变化。

模式的作用：
1、分步创建一个复杂的对象。
2、解耦封装过程和具体创建的组件。
3、无需关心组件如何组装。



