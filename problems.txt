http://dengo.org/  不错的网站

css 预编译 模块化
js 模板引擎
js断流
高阶函数  http://www.cnblogs.com/dojo-lzz/p/4576083.html
         http://dengo.org/archives/1004
jquery源码
promise的问题    http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html
                http://www.zhangxinxu.com/wordpress/2014/02/es6-javascript-promise-%E6%84%9F%E6%80%A7%E8%AE%A4%E7%9F%A5/

http://web.jobbole.com/82251/ js 面试题目

http://blog.jobbole.com/29269/

http://www.cnblogs.com/muyou/archive/2012/06/26/2563930.html

HTML全局属性(global attribute)有哪些
参考资料：[MDN: html global attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes)或者[W3C HTML global-attributes](http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core)

](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction)**:

### 如何进行网站性能优化

[雅虎Best Practices for Speeding Up Your Web Site](https://developer.yahoo.com/performance/rules.html)：

SGML？？？？

JavaScript权威指南

5、JavaScript中如何对一个对象进行深度clone?

19、兼容写法 (能力检测)

20、 css计数器

21、 js 中 in 操作符

26、 jquery 动画 animate(params, options) slideUp()

http://www.cnblogs.com/dolphinX/p/3524977.html

37 http://www.cnblogs.com/dolphinX/p/3529249.html 有待研究

http://www.zhangxinxu.com/wordpress/2013/05/%E7%90%86%E8%A7%A3another-javascript-quiz-%E9%A2%98%E7%9B%AE/


js 浏览器兼容性？？
Bootstrap???

cmd 和 amd 的区别？？？
nodejs 看下
准备下自我介绍

请描述你经历过的JavaScript单元测试？？？  Quint jQuery的单位测试框架

数组排序
http://wteamxq.com/testDemo/array.html

position 有多少个属性
标签语义化
absolute 父级没有 relative 怎么办

css3 用的最多的  Transition  圆角 图片撑满的那个属性 background-size:contain;
box-sizing:border-box;  怪异核模型
设置元素居中
nth-of-type()

on方法 中判断是哪个对象 ev 中的

argument 有什么其他属性方法

js 循环输出最终结果的原理  js是单线程

setTimeout() 原理

// 不要一边创建元素，一边给元素添加属性或事件处理函数
var aBtn = document.getElementsByTagName('input');
for (var i=0; i<3; i++) {
	// 只有第三个函数有事件 innerHTML 会先清空页面上所有的按钮在创建
	document.body.innerHTML = document.body.innerHTML + '<input type="button" value="按钮" />';
	// 第一个按钮 = 没有事件处理函数了  0
	// 第二个按钮 = 没有事件处理函数了	 1
	// 第三个按钮 = 有事件处理函数了	 1
	aBtn[i].onclick = function () {
		alert(123);
	};
}

inline-block 加在块元素上是没有效果的

// 第一次for循环为 第一个按钮绑定了事件处理函数，但是函数没有执行，函数执行就只有点击的时候才会执行
// 后面几次循环都是一样，那么你点击完以后 i 就已经是 3了
for(var i=0;i<aBtn.length;i++){

    aBtn[i].onclick=function(){
        alert(i);  // 3
    }

}

camtasia studio
手机端H5上传图片
能调摄像头 本地相册

https://github.com/think2011/localResizeIMG4


http://my.oschina.net/sevenhdu/blog/332014
http://www.cnblogs.com/yexiaochai/p/3567597.html
DOM2级事件规定事件包括三个阶段：

1、 事件捕获阶段

2、处于目标阶段

3、事件冒泡阶段

很多人我都会问他，上个项目用到什么技术，为什么用这个，有什么优缺点，有什么替代方案
对MVC有什么了解，MVVM呢，有没有自己搭过项目架构

熟悉TCP/IP、HTTP基本工作原理？？
HTTP协议
TCP三次握手
web性能瓶颈
代码打包都没试过，sass、less、grunt

了解前端 MVC 开发模式

ecma 5  http://www.open-open.com/lib/view/open1331175932452.html


http://www.jb51.net/article/43261.htm 浮动
http://blog.csdn.net/return_false/article/details/11203025 清除浮动

border 研究三角??


http://www.cnblogs.com/webblog/archive/2009/07/07/1518274.html  css选择器

http://www.cnblogs.com/2050/archive/2012/08/13/2636467.html#2457812 margin负值


压缩要学习下

bind() 研究下

http://www.phperz.com/article/14/0925/25668.html  不错面试题目

http://blog.csdn.net/dyllove98/article/details/8981433 好文章 有深度的 css

http://www.ruanyifeng.com  不错

http://blog.jobbole.com/54495/  不错js技巧


JQuery的源码看过吗？能不能简单说一下它的实现原理？


写一个通用的事件侦听器函数。

    // event(事件)工具集，来源：github.com/markyun
    markyun.Event = {
        // 页面加载完成后
        readyEvent : function(fn) {
            if (fn==null) {
                fn=document;
            }
            var oldonload = window.onload;
            if (typeof window.onload != 'function') {
                window.onload = fn;
            } else {
                window.onload = function() {
                    oldonload();
                    fn();
                };
            }
        },
        // 视能力分别使用dom0||dom2||IE方式 来绑定事件
        // 参数： 操作的元素,事件名称 ,事件处理程序
        addEvent : function(element, type, handler) {
            if (element.addEventListener) {
                //事件类型、需要执行的函数、是否捕捉
                element.addEventListener(type, handler, false);
            } else if (element.attachEvent) {
                element.attachEvent('on' + type, function() {
                    handler.call(element);
                });
            } else {
                element['on' + type] = handler;
            }
        },
        // 移除事件
        removeEvent : function(element, type, handler) {
            if (element.removeEnentListener) {
                element.removeEnentListener(type, handler, false);
            } else if (element.datachEvent) {
                element.detachEvent('on' + type, handler);
            } else {
                element['on' + type] = null;
            }
        },
        // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)
        stopPropagation : function(ev) {
            if (ev.stopPropagation) {
                ev.stopPropagation();
            } else {
                ev.cancelBubble = true;
            }
        },
        // 取消事件的默认行为
        preventDefault : function(event) {
            if (event.preventDefault) {
                event.preventDefault();
            } else {
                event.returnValue = false;
            }
        },
        // 获取事件目标
        getTarget : function(event) {
            return event.target || event.srcElement;
        },
        // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；
        getEvent : function(e) {
            var ev = e || window.event;
            if (!ev) {
                var c = this.getEvent.caller;
                while (c) {
                    ev = c.arguments[0];
                    if (ev && Event == ev.constructor) {
                        break;
                    }
                    c = c.caller;
                }
            }
            return ev;
        }
    };

对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？

     前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。
    1、实现界面交互
    2、提升用户体验
    3、有了Node.js，前端可以实现服务端的一些事情

前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，

 参与项目，快速高质量完成实现效果图，精确到1px；

 与团队成员，UI设计，产品经理的沟通；

 做好的页面结构，页面重构和用户体验；

 处理hack，兼容、写出优美的代码格式；

 针对服务器的优化、拥抱最新前端技术。

加班的看法？

加班就像借钱，原则应当是------救急不救穷


平时如何管理你的项目？

先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；

编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；

标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；

页面进行标注（例如 页面 模块 开始和结束）；

CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；

JS 分文件夹存放 命名以该JS功能为准的英文翻译。

图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理


KISSY.？？？？



### 评价一下三种方法实现继承的优缺点,并改进

```
function Shape() {}

function Rect() {}

// 方法1
Rect.prototype = new Shape();

// 方法2
Rect.prototype = Shape.prototype;

// 方法3
Rect.prototype = Object.create(Shape.prototype);

Rect.prototype.area = function () {
  // do something
};
```

方法1：

1. 优点：正确设置原型链实现继承
2. 优点：父类实例属性得到继承，原型链查找效率提高，也能为一些属性提供合理的默认值
3. 缺点：父类实例属性为引用类型时，不恰当地修改会导致所有子类被修改
4. 缺点：创建父类实例作为子类原型时，可能无法确定构造函数需要的合理参数，这样提供的参数继承给子类没有实际意义，当子类需要这些参数时应该在构造函数中进行初始化和设置
5. 总结：继承应该是继承方法而不是属性，为子类设置父类实例属性应该是通过在子类构造函数中调用父类构造函数进行初始化

方法2：

1. 优点：正确设置原型链实现继承
2. 缺点：父类构造函数原型与子类相同。修改子类原型添加方法会修改父类

方法3：

1. 优点：正确设置原型链且避免方法1.2中的缺点
2. 缺点：ES5方法需要注意兼容性

改进：

1. 所有三种方法应该在子类构造函数中调用父类构造函数实现实例属性初始化

```
function Rect() {
    Shape.call(this);
}
```


2. 用新创建的对象替代子类默认原型，设置``Rect.prototype.constructor = Rect;``保证一致性
3. 第三种方法的polyfill：

```
function create(obj) {
    if (Object.create) {
        return Object.create(obj);
    }

    function f() {};
    f.prototype = obj;
    return new f();
}
```