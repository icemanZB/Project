jquery prop 方法解析 http://blog.csdn.net/chaiyining007/article/details/8218038

事件绑定好处  可以绑定多个事件且不会覆盖

dom.onclick=function(){ console.log(1); };
dom.onclick=function(){ console.log(2); };  最终结果是 输出2

事件代理 ( 委托 ) 绑定在父元素上,使其子元素也拥有这个事件
针对多个元素绑定的时候,并且是动态输出的元素,这个时候就可以用事件代理

window.onscroll=function(){
    var top = document.documentElement ? document.documentElement.scrollTop : document.body.scrollTop;
}

scrollTop是什么及用法说明 http://blog.csdn.net/gang_gang_gang/article/details/4233044

scrollTop指的是"元素中的内容"超出"元素上边界"的那部分的高度,向上滚动的数值 scrollTop 如果li中没有内容 scrollTop数值不变

jQuery中跳出 each 循环  continue 可以使用 return true
                        break    可以使用 return false

var _href = _menu.getAttribute('href');  // 获取到 #item1
var _href=_menu.href; // 获取到的是浏览器的路径
<a href="#item1" class="current">1F 男装</a>

使用正则表达式来判断一个字符串中是否有某个字符串
if (/active/.test(aLi[i].className)) {}

javascript中top、clientTop、scrollTop、offsetTop的讲解
http://www.cnblogs.com/trlanfeng/archive/2012/11/04/2753280.html

offsetHeight:为计算后盒子的整体高度 style.top:为绝对定位后的 top 值
offsetTop: 盒子顶部相对父级顶部的高度

offsetTop 和 style.top 的区别
1、offsetTop 返回的是数字,而 style.top 返回的是字符串,除了数字外还带有单位: px
2、offsetTop 只读 而 style.top 可读写
3、如果没有给 HTML 元素指定过 top 样式,则 style.top 返回的是空字符串。

jQuery中的.height()、.innerHeight()和.outerHeight()
.height() 是没有计算过的  不包括padding,不包括边框
获取计算后的整个高度  aLi.outerHeight() = offsetHeight
.innerHeight()  包括padding但不包括border  document.getElementById("div1").clientHeight
.outerHeight()  包括padding和border  还可以接受一个参数,该参数代表是否计算外边距,如果为true则表示计算外边距
js 写法 div1.offsetHeight + parseInt(div1.style.marginTop) + parseInt(div1.style.marginBottom);
js中 offsetHeight 是动态获取值
http://www.kuqin.com/shuoit/20140113/337572.html

jQuery之位置
http://www.cnblogs.com/kissdodog/archive/2012/12/09/2809770.html
oUl.position().top ==> oUl.get(0).offsetTop

$("#content").find(".item") == $('#content .item')  但是后者效率低

var arr=[1,2,3];
pop() 方法用于删除并返回数组的最后一个元素
unshift() 方法可向数组的开头添加一个或更多元素,并返回新的长度

arr.unshift(arr.pop());  // 3   arr => [3, 1, 2]

var arr=[1,2,3];
shift() 方法用于把数组的第一个元素从其中删除,并返回第一个元素的值
push()  方法可向数组的末尾添加一个或多个元素,并返回新的长度

arr.push(arr.shift()); // 3   arr => [2, 3, 1]

Math.random()  random() 方法可返回介于 0 ~ 1 之间的一个随机数

js 中 appendChild 带有剪切功能,并不是复制(可向节点的子节点列表的末尾添加新的子节点)

appendChild 方法是在父级节点中的子节点的末尾添加新的节点(相对于父级节点 来说)

insertBefore() 方法：可在已有的子节点前插入一个新的子节点
insertBefore 方法 是在已有的节点前添加新的节点(相对于子节点来说的)

appendChild于insertBefore http://www.cnblogs.com/ATree/archive/2011/09/26/JS-appendChild-insertBefore.html

复制节点 cloneNode() 如果参数是 true 就是一起复制里面的子节点, false 就只复制当前节点 不会复制里面的子节点
返回的节点不属于文档树,它的 parentNode 属性为 null
当复制的是 Element 节点时,它的所有属性都将被复制,但要注意,当前节点上注册的事件监听器函数不会被复制

jquery stop() 方法停止当前正在运行的动画
工作中遇到过的实际案例:
在项目里做的一个下拉菜单,当鼠标移上去的时候就菜单显示,当鼠标离开的时候菜单隐藏

如果我快速不断地将鼠标移入移出菜单(即当菜单下拉动画未完成时,鼠标又移出了菜单)就会产生"动画积累"
当鼠标停止移动后,积累的动画还会持续执行,直到动画序列执行完毕

解决方法:在写动画效果的代码前加入 stop(true,true) 这样每次快速的移入移出菜单就正常了
当移入一个菜单的时候,停止所有加入队列的动画,但是完成当前的动画(跳至当前动画的最终效果位置)



removeChild 的一些问题
<ul id="demo">
<li>a</li>
<li>b</li>
<li>c</li>
</ul>
那么这时候只会删除第一行，因为当删除了一个之后，行的位置会向前移动一位。
giftTrs.length也会相应减一。
var ul = document.getElementById('demo');
var liList = ul.getElementsByTagName('li');
for (var i = 0; i < = liList.length; i++) {
ul.removeChild(liList[i]);
}
正确做法：
var ul = document.getElementById('demo');
var liList = ul.getElementsByTagName('li');
var lilength = liList.length;
for (var i = 0; i < lilength; i++) {
ul.removeChild(liList[0]);
}
IE 下 removeChild 的问题
http://fins.iteye.com/blog/172263/
<html>
 <head>
<script type="text/javascript">

function $(id) {
    return typeof(id)=='string'?document.getElementById(id):id;
}

function removeElement(el){
        el=$(el);
        if (el && el.parentNode) {
            el.parentNode.removeChild(el);
        }
}

  </script>
 </head>

 <body >
  <div id="ttt">aaa</div>

  <input type="button" value="b1" onclick="removeElement('ttt')">
 </body>
</html>

removeNode : isIE ? function(){
    var d;
    return function(n){
        if(n && n.tagName != 'BODY'){
            d = d || document.createElement('div');
            d.appendChild(n);
            d.innerHTML = '';
        }
    }
}() : function(n){
    if(n && n.parentNode && n.tagName != 'BODY'){
        n.parentNode.removeChild(n);
    }
}
